<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
Xigg/library/Xigg/Model/Comment.php
*/
require_once 'Sabai/Model/TreeEntity.php';

class Xigg_Model_CommentBase extends Sabai_Model_TreeEntity
{
    function Xigg_Model_CommentBase(&$model)
    {
        parent::Sabai_Model_TreeEntity('Comment', $model);
        $this->_vars = array('comment_id' => 0, 'comment_created' => 0, 'comment_updated' => 0, 'comment_title' => null, 'comment_content_syntax' => null, 'comment_body' => null, 'comment_body_html' => null, 'comment_allow_edit' => 1, 'comment_node_id' => null, 'comment_parent' => null, 'comment_userid' => null);
    }

    function varNames()
    {
        return array('id' => _('Id'), 'created' => _('Created'), 'updated' => _('Updated'), 'title' => _('Title'), 'content_syntax' => _('Content syntax'), 'body' => _('Body'), 'body_html' => _('Body html'), 'allow_edit' => _('Allow edit'), 'node_id' => _('Node id'), 'parent' => _('Parent'), 'userid' => _('Userid'));
    }

    function propertyNames()
    {
        return array('title' => _('Title'), 'content_syntax' => _('Content syntax'), 'body' => _('Body'), 'body_html' => _('Body html'), 'allow_edit' => _('Allow edit'), 'Node' => 'Node', 'Parent' => 'Parent');
    }

    function localPropertyNames()
    {
        return array('title' => _('Title'), 'content_syntax' => _('Content syntax'), 'body' => _('Body'), 'body_html' => _('Body html'), 'allow_edit' => _('Allow edit'));
    }

    function getUserId()
    {
        return $this->getVar('userid');
    }

    function assignUser(&$user)
    {
        $this->_setVar('userid', $user->getId());
    }

    function &_fetchUser()
    {
        if (!isset($this->_objects['User'])) {
            $user_id = $this->getUserId();
            $identities = $this->_model->fetchUserIdentities(array($user_id));
            $this->_objects['User'] =& $identities[$user_id];
        }
        return $this->_objects['User'];
    }

    function isOwnedBy(&$user)
    {
        return $this->getUserId() == $user->getId();
    }

    function getId()
    {
        return $this->getVar('id');
    }

    function setId($value)
    {
        $this->setVar('id', $value);
    }

    function getTimeCreated()
    {
        return $this->getVar('created');
    }

    function getTimeUpdated()
    {
        return $this->getVar('updated');
    }

    function getLabel()
    {
        return $this->getVar('title');
    }

    function setLabel($value)
    {
        $this->setVar('title', $value);
    }

    function getParentId()
    {
        return intval($this->getVar('parent'));
    }

    function assignNode(&$entity)
    {
        if ($entity->getName() != 'Node') {
            return false;
        }
        return $this->_assignEntity('node_id', $entity);
    }

    function unassignNode()
    {
        return $this->_unassignEntity('node_id');
    }

    function &_fetchNode()
    {
        if (!isset($this->_objects['Node'])) {
            $this->_objects['Node'] =& $this->_fetchEntity('Node', 'node_id');
        }
        return $this->_objects['Node'];
    }

    function assignParent(&$entity)
    {
        if ($entity->getName() != 'Comment') {
            return false;
        }
        return $this->_assignEntity('parent', $entity);
    }

    function unassignParent()
    {
        return $this->_unassignEntity('parent');
    }

    function &_fetchParent()
    {
        if (!isset($this->_objects['Parent'])) {
            $this->_objects['Parent'] =& $this->_fetchEntity('Comment', 'parent');
        }
        return $this->_objects['Parent'];
    }

    function _getVar($name)
    {
        return $this->_vars['comment_' . $name];
    }

    function _setVar($name, $value)
    {
        switch ($name) {
        case 'id':
            $this->_vars['comment_id'] = $value;
            break;
        case 'title':
            $this->_vars['comment_title'] = trim($value);
            break;
        case 'content_syntax':
            $this->_vars['comment_content_syntax'] = trim($value);
            break;
        case 'body':
            $this->_vars['comment_body'] = trim($value);
            break;
        case 'body_html':
            $this->_vars['comment_body_html'] = trim($value);
            break;
        case 'allow_edit':
            $this->_vars['comment_allow_edit'] = $value;
            break;
        case 'node_id':
            $this->_vars['comment_node_id'] = $value;
            break;
        case 'parent':
            $this->_vars['comment_parent'] = $value;
            break;
        case 'userid':
            $this->_vars['comment_userid'] = trim($value);
            break;
        default:
            trigger_error(sprintf('Error trying to set value for variable %s. This variable is either read-only or does not exist for this entity', $name), E_USER_WARNING);
            return false;
        }
        return true;
    }

    function &__get($name)
    {
        $ret = null;
        settype($name, 'string');
        switch ($name) {
        case 'title':
            $ret = $this->getVar('title');
            break;
        case 'content_syntax':
            $ret = $this->getVar('content_syntax');
            break;
        case 'body':
            $ret = $this->getVar('body');
            break;
        case 'body_html':
            $ret = $this->getVar('body_html');
            break;
        case 'allow_edit':
            $ret = $this->getVar('allow_edit');
            break;
        case 'Node':
            $ret =& $this->_fetchNode();
            break;
        case 'Parent':
            $ret =& $this->_fetchParent();
            break;
        case 'User':
            $ret =& $this->_fetchUser();
            break;
        case 'Children':
            $ret =& $this->_fetchChildren();
            break;
        default:
        }
        return $ret;
    }

    function __set($name, $value)
    {
        settype($name, 'string');
        switch ($name) {
        case 'title':
            $this->setVar('title', $value);
            break;
        case 'content_syntax':
            $this->setVar('content_syntax', $value);
            break;
        case 'body':
            $this->setVar('body', $value);
            break;
        case 'body_html':
            $this->setVar('body_html', $value);
            break;
        case 'allow_edit':
            $this->setVar('allow_edit', $value);
            break;
        case 'Node':
            if (is_array($value)) {
                $entity =& $value[0];
            } else {
                $entity =& $value;
            }
            $this->assignNode($entity);
            break;
        case 'Parent':
            if (is_array($value)) {
                $entity =& $value[0];
            } else {
                $entity =& $value;
            }
            $this->assignParent($entity);
            break;
        default:
        }
    }

    function initVar($name, $value)
    {
        switch ($name) {
        case 'comment_id':
            $this->_vars['comment_id'] = $value;
            break;
        case 'comment_created':
            $this->_vars['comment_created'] = $value;
            break;
        case 'comment_updated':
            $this->_vars['comment_updated'] = $value;
            break;
        case 'comment_title':
            $this->_vars['comment_title'] = $value;
            break;
        case 'comment_content_syntax':
            $this->_vars['comment_content_syntax'] = $value;
            break;
        case 'comment_body':
            $this->_vars['comment_body'] = $value;
            break;
        case 'comment_body_html':
            $this->_vars['comment_body_html'] = $value;
            break;
        case 'comment_allow_edit':
            $this->_vars['comment_allow_edit'] = $value;
            break;
        case 'comment_node_id':
            $this->_vars['comment_node_id'] = $value;
            break;
        case 'comment_parent':
            $this->_vars['comment_parent'] = $value;
            break;
        case 'comment_userid':
            $this->_vars['comment_userid'] = $value;
            break;
        default:
        }
    }
}

require_once 'Sabai/Model/TreeEntityRepository.php';

class Xigg_Model_CommentRepositoryBase extends Sabai_Model_TreeEntityRepository
{
    function Xigg_Model_CommentRepositoryBase(&$model)
    {
        parent::Sabai_Model_TreeEntityRepository('Comment', $model);
    }
    function &fetchByUser($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByForeign('comment_userid', $id, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByUser($id, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntity('User', $id, $perpage, $sort, $order);
        return $it;
    }

    function countByUser($id)
    {
        return $this->_countByForeign('comment_userid', $id);
    }

    function &fetchByUserAndCriteria($id, &$criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByForeignAndCriteria('comment_userid', $id, $criteria, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByUserAndCriteria($id, &$criteria, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntityAndCriteria('User', $id, $criteria, $perpage, $sort, $order);
        return $it;
    }

    function countByUserAndCriteria($id, &$criteria)
    {
        return $this->_countByForeignAndCriteria('comment_userid', $id, $criteria);
    }

    function &fetchByNode($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByForeign('comment_node_id', $id, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByNode($id, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntity('Node', $id, $perpage, $sort, $order);
        return $it;
    }

    function countByNode($id)
    {
        return $this->_countByForeign('comment_node_id', $id);
    }

    function &fetchByNodeAndCriteria($id, &$criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByForeignAndCriteria('comment_node_id', $id, $criteria, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByNodeAndCriteria($id, &$criteria, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntityAndCriteria('Node', $id, $criteria, $perpage, $sort, $order);
        return $it;
    }

    function countByNodeAndCriteria($id, &$criteria)
    {
        return $this->_countByForeignAndCriteria('comment_node_id', $id, $criteria);
    }

    function &fetchByParent($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByForeign('comment_parent', $id, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByParent($id, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntity('Parent', $id, $perpage, $sort, $order);
        return $it;
    }

    function countByParent($id)
    {
        return $this->_countByForeign('comment_parent', $id);
    }

    function &fetchByParentAndCriteria($id, &$criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByForeignAndCriteria('comment_parent', $id, $criteria, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByParentAndCriteria($id, &$criteria, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntityAndCriteria('Parent', $id, $criteria, $perpage, $sort, $order);
        return $it;
    }

    function countByParentAndCriteria($id, &$criteria)
    {
        return $this->_countByForeignAndCriteria('comment_parent', $id, $criteria);
    }

    function &_getCollectionByRowset(&$rs)
    {
        $collection =& new Xigg_Model_CommentsByRowset($rs, $this->_model->create('Comment'), $this->_model);
        return $collection;
    }

    function &createCollection($entities = array(), $key = 0)
    {
        $collection =& new Xigg_Model_Comments($this->_model, $entities, $key);
        return $collection;
    }
}

class Xigg_Model_CommentsByRowset extends Sabai_Model_EntityCollection_Rowset
{
    function Xigg_Model_CommentsByRowset(&$rs, &$emptyEntity, &$model, $key = 0)
    {
        parent::Sabai_Model_EntityCollection_Rowset('Comments', $rs, $emptyEntity, $model, $key);
    }

    function _loadRow(&$entity, $row)
    {
        $entity->initVars($row);
        if (isset($row['level'])) {
            $entity->_parentsCount = $row['level'];
        }
        $entity->left = $row['tree_left'];
        $entity->right = $row['tree_right'];
    }
}

class Xigg_Model_Comments extends Sabai_Model_EntityCollection_Array
{
    function Xigg_Model_Comments(&$model, $entities = array(), $key = 0)
    {
        parent::Sabai_Model_EntityCollection_Array($model, 'Comments', $entities, $key);
    }
}