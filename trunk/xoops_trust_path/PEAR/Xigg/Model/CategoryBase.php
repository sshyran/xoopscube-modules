<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
Xigg/library/Xigg/Model/Category.php
*/
require_once 'Sabai/Model/TreeEntity.php';

class Xigg_Model_CategoryBase extends Sabai_Model_TreeEntity
{
    function Xigg_Model_CategoryBase(&$model)
    {
        parent::Sabai_Model_TreeEntity('Category', $model);
        $this->_vars = array('category_id' => 0, 'category_created' => 0, 'category_updated' => 0, 'category_name' => null, 'category_description' => null, 'category_parent' => null, 'category_node_count' => 0, 'category_node_last' => 0, 'category_node_lasttime' => 0);
    }

    function varNames()
    {
        return array('id' => _('Id'), 'created' => _('Created'), 'updated' => _('Updated'), 'name' => _('Name'), 'description' => _('Description'), 'parent' => _('Parent'), 'node_count' => _('Node count'), 'node_last' => _('Node last'), 'node_lasttime' => _('Node lasttime'));
    }

    function propertyNames()
    {
        return array('name' => _('Name'), 'description' => _('Description'), 'Parent' => 'Parent', 'Nodes' => _('Nodes'));
    }

    function localPropertyNames()
    {
        return array('name' => _('Name'), 'description' => _('Description'));
    }

    function getId()
    {
        return $this->getVar('id');
    }

    function setId($value)
    {
        $this->setVar('id', $value);
    }

    function getTimeCreated()
    {
        return $this->getVar('created');
    }

    function getTimeUpdated()
    {
        return $this->getVar('updated');
    }

    function getLabel()
    {
        return $this->getVar('name');
    }

    function setLabel($value)
    {
        $this->setVar('name', $value);
    }

    function getParentId()
    {
        return intval($this->getVar('parent'));
    }

    function getNodeCount()
    {
        return $this->getVar('node_count');
    }

    function hasLastNode()
    {
        $last_id = $this->getVar('node_last');
        return !empty($last_id);
    }

    function assignParent(&$entity)
    {
        if ($entity->getName() != 'Category') {
            return false;
        }
        return $this->_assignEntity('parent', $entity);
    }

    function unassignParent()
    {
        return $this->_unassignEntity('parent');
    }

    function &_fetchParent()
    {
        if (!isset($this->_objects['Parent'])) {
            $this->_objects['Parent'] =& $this->_fetchEntity('Category', 'parent');
        }
        return $this->_objects['Parent'];
    }

    function addNode(&$entity)
    {
        if ($entity->getName() != 'Node') {
            return false;
        }
        return $this->_addEntity($entity);
    }

    function removeNode(&$entity)
    {
        if ($entity->getName() != 'Node') {
            return;
        }
        return $this->removeNodeById($entity->getId());
    }

    function removeNodeById($id)
    {
        return $this->_removeEntityById('node_id', 'Node', $id);
    }

    function &createNode()
    {
        $entity =& $this->_createEntity('Node');
        return $entity;
    }

    function &_fetchNodes()
    {
        if (!isset($this->_objects['Nodes'])) {
            $this->_objects['Nodes'] =& $this->_fetchEntities('Node');
        }
        return $this->_objects['Nodes'];
    }

    function &_fetchLastNode()
    {
        if (!isset($this->_objects['LastNode']) && $this->hasLastNode()) {
            $it =& $this->_fetchEntities('Node', 1, 0, 'node_created', 'DESC');
            $this->_objects['LastNode'] =& $it->getNext();
        }
        return $this->_objects['LastNode'];
    }

    function &paginateNodes($perpage = 10, $sort = null, $order = null)
    {
        $pages =& $this->_paginateEntities('Node', $perpage, $sort, $order);
        return $pages;
    }

    function removeNodes()
    {
        return $this->_removeEntities('Node');
    }

    function countNodes()
    {
        return $this->_countEntities('Node');
    }

    function _getVar($name)
    {
        return $this->_vars['category_' . $name];
    }

    function _setVar($name, $value)
    {
        switch ($name) {
        case 'id':
            $this->_vars['category_id'] = $value;
            break;
        case 'name':
            $this->_vars['category_name'] = trim($value);
            break;
        case 'description':
            $this->_vars['category_description'] = trim($value);
            break;
        case 'parent':
            $this->_vars['category_parent'] = $value;
            break;
        case 'node_lasttime':
            $this->_vars['category_node_lasttime'] = $value;
            break;
        default:
            trigger_error(sprintf('Error trying to set value for variable %s. This variable is either read-only or does not exist for this entity', $name), E_USER_WARNING);
            return false;
        }
        return true;
    }

    function &__get($name)
    {
        $ret = null;
        settype($name, 'string');
        switch ($name) {
        case 'name':
            $ret = $this->getVar('name');
            break;
        case 'description':
            $ret = $this->getVar('description');
            break;
        case 'Parent':
            $ret =& $this->_fetchParent();
            break;
        case 'Nodes':
            $ret =& $this->_fetchNodes();
            break;
        case 'LastNode':
            $ret =& $this->_fetchLastNode();
            break;
        case 'Children':
            $ret =& $this->_fetchChildren();
            break;
        default:
        }
        return $ret;
    }

    function __set($name, $value)
    {
        settype($name, 'string');
        switch ($name) {
        case 'name':
            $this->setVar('name', $value);
            break;
        case 'description':
            $this->setVar('description', $value);
            break;
        case 'Parent':
            if (is_array($value)) {
                $entity =& $value[0];
            } else {
                $entity =& $value;
            }
            $this->assignParent($entity);
            break;
        case 'Nodes':
            $this->removeNodes();
            foreach (array_keys($value) as $i) {
                $this->addNode($value[$i]);
            }
            break;
        default:
        }
    }

    function initVar($name, $value)
    {
        switch ($name) {
        case 'category_id':
            $this->_vars['category_id'] = $value;
            break;
        case 'category_created':
            $this->_vars['category_created'] = $value;
            break;
        case 'category_updated':
            $this->_vars['category_updated'] = $value;
            break;
        case 'category_name':
            $this->_vars['category_name'] = $value;
            break;
        case 'category_description':
            $this->_vars['category_description'] = $value;
            break;
        case 'category_parent':
            $this->_vars['category_parent'] = $value;
            break;
        case 'category_node_count':
            $this->_vars['category_node_count'] = $value;
            break;
        case 'category_node_last':
            $this->_vars['category_node_last'] = $value;
            break;
        case 'category_node_lasttime':
            $this->_vars['category_node_lasttime'] = $value;
            break;
        default:
        }
    }
}

require_once 'Sabai/Model/TreeEntityRepository.php';

class Xigg_Model_CategoryRepositoryBase extends Sabai_Model_TreeEntityRepository
{
    function Xigg_Model_CategoryRepositoryBase(&$model)
    {
        parent::Sabai_Model_TreeEntityRepository('Category', $model);
    }

    function &fetchByParent($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByForeign('category_parent', $id, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByParent($id, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntity('Parent', $id, $perpage, $sort, $order);
        return $it;
    }

    function countByParent($id)
    {
        return $this->_countByForeign('category_parent', $id);
    }

    function &fetchByParentAndCriteria($id, &$criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByForeignAndCriteria('category_parent', $id, $criteria, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByParentAndCriteria($id, &$criteria, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntityAndCriteria('Parent', $id, $criteria, $perpage, $sort, $order);
        return $it;
    }

    function countByParentAndCriteria($id, &$criteria)
    {
        return $this->_countByForeignAndCriteria('category_parent', $id, $criteria);
    }

    function &_getCollectionByRowset(&$rs)
    {
        $collection =& new Xigg_Model_CategoriesByRowset($rs, $this->_model->create('Category'), $this->_model);
        return $collection;
    }

    function &createCollection($entities = array(), $key = 0)
    {
        $collection =& new Xigg_Model_Categories($this->_model, $entities, $key);
        return $collection;
    }
}

class Xigg_Model_CategoriesByRowset extends Sabai_Model_EntityCollection_Rowset
{
    function Xigg_Model_CategoriesByRowset(&$rs, &$emptyEntity, &$model, $key = 0)
    {
        parent::Sabai_Model_EntityCollection_Rowset('Categories', $rs, $emptyEntity, $model, $key);
    }

    function _loadRow(&$entity, $row)
    {
        $entity->initVars($row);
        if (isset($row['level'])) {
            $entity->_parentsCount = $row['level'];
        }
        $entity->left = $row['tree_left'];
        $entity->right = $row['tree_right'];
    }
}

class Xigg_Model_Categories extends Sabai_Model_EntityCollection_Array
{
    function Xigg_Model_Categories(&$model, $entities = array(), $key = 0)
    {
        parent::Sabai_Model_EntityCollection_Array($model, 'Categories', $entities, $key);
    }
}