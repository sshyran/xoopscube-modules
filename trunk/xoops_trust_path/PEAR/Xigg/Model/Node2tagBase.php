<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
Xigg/library/Xigg/Model/Node2tag.php
*/
class Xigg_Model_Node2tagBase extends Sabai_Model_Entity
{
    function Xigg_Model_Node2tagBase(&$model)
    {
        parent::Sabai_Model_Entity('Node2tag', $model);
        $this->_vars = array('node2tag_id' => 0, 'node2tag_created' => 0, 'node2tag_updated' => 0, 'node2tag_node_id' => null, 'node2tag_tag_id' => null);
    }

    function varNames()
    {
        return array('id' => _('Id'), 'created' => _('Created'), 'updated' => _('Updated'), 'node_id' => _('Node id'), 'tag_id' => _('Tag id'));
    }

    function propertyNames()
    {
        return array('Node' => 'Node', 'Tag' => 'Tag');
    }

    function localPropertyNames()
    {
        return array();
    }

    function getId()
    {
        return $this->getVar('id');
    }

    function setId($value)
    {
        $this->setVar('id', $value);
    }

    function getTimeCreated()
    {
        return $this->getVar('created');
    }

    function getTimeUpdated()
    {
        return $this->getVar('updated');
    }

    function assignNode(&$entity)
    {
        if ($entity->getName() != 'Node') {
            return false;
        }
        return $this->_assignEntity('node_id', $entity);
    }

    function unassignNode()
    {
        return $this->_unassignEntity('node_id');
    }

    function &_fetchNode()
    {
        if (!isset($this->_objects['Node'])) {
            $this->_objects['Node'] =& $this->_fetchEntity('Node', 'node_id');
        }
        return $this->_objects['Node'];
    }

    function assignTag(&$entity)
    {
        if ($entity->getName() != 'Tag') {
            return false;
        }
        return $this->_assignEntity('tag_id', $entity);
    }

    function unassignTag()
    {
        return $this->_unassignEntity('tag_id');
    }

    function &_fetchTag()
    {
        if (!isset($this->_objects['Tag'])) {
            $this->_objects['Tag'] =& $this->_fetchEntity('Tag', 'tag_id');
        }
        return $this->_objects['Tag'];
    }

    function _getVar($name)
    {
        return $this->_vars['node2tag_' . $name];
    }

    function _setVar($name, $value)
    {
        switch ($name) {
        case 'id':
            $this->_vars['node2tag_id'] = $value;
            break;
        case 'node_id':
            $this->_vars['node2tag_node_id'] = $value;
            break;
        case 'tag_id':
            $this->_vars['node2tag_tag_id'] = $value;
            break;
        default:
            trigger_error(sprintf('Error trying to set value for variable %s. This variable is either read-only or does not exist for this entity', $name), E_USER_WARNING);
            return false;
        }
        return true;
    }

    function &__get($name)
    {
        $ret = null;
        settype($name, 'string');
        switch ($name) {
        case 'Node':
            $ret =& $this->_fetchNode();
            break;
        case 'Tag':
            $ret =& $this->_fetchTag();
            break;
        default:
        }
        return $ret;
    }

    function __set($name, $value)
    {
        settype($name, 'string');
        switch ($name) {
        case 'Node':
            if (is_array($value)) {
                $entity =& $value[0];
            } else {
                $entity =& $value;
            }
            $this->assignNode($entity);
            break;
        case 'Tag':
            if (is_array($value)) {
                $entity =& $value[0];
            } else {
                $entity =& $value;
            }
            $this->assignTag($entity);
            break;
        default:
        }
    }

    function initVar($name, $value)
    {
        switch ($name) {
        case 'node2tag_id':
            $this->_vars['node2tag_id'] = $value;
            break;
        case 'node2tag_created':
            $this->_vars['node2tag_created'] = $value;
            break;
        case 'node2tag_updated':
            $this->_vars['node2tag_updated'] = $value;
            break;
        case 'node2tag_node_id':
            $this->_vars['node2tag_node_id'] = $value;
            break;
        case 'node2tag_tag_id':
            $this->_vars['node2tag_tag_id'] = $value;
            break;
        default:
        }
    }
}

class Xigg_Model_Node2tagRepositoryBase extends Sabai_Model_EntityRepository
{
    function Xigg_Model_Node2tagRepositoryBase(&$model)
    {
        parent::Sabai_Model_EntityRepository('Node2tag', $model);
    }

    function &fetchByNode($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByForeign('node2tag_node_id', $id, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByNode($id, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntity('Node', $id, $perpage, $sort, $order);
        return $it;
    }

    function countByNode($id)
    {
        return $this->_countByForeign('node2tag_node_id', $id);
    }

    function &fetchByNodeAndCriteria($id, &$criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByForeignAndCriteria('node2tag_node_id', $id, $criteria, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByNodeAndCriteria($id, &$criteria, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntityAndCriteria('Node', $id, $criteria, $perpage, $sort, $order);
        return $it;
    }

    function countByNodeAndCriteria($id, &$criteria)
    {
        return $this->_countByForeignAndCriteria('node2tag_node_id', $id, $criteria);
    }

    function &fetchByTag($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByForeign('node2tag_tag_id', $id, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByTag($id, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntity('Tag', $id, $perpage, $sort, $order);
        return $it;
    }

    function countByTag($id)
    {
        return $this->_countByForeign('node2tag_tag_id', $id);
    }

    function &fetchByTagAndCriteria($id, &$criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByForeignAndCriteria('node2tag_tag_id', $id, $criteria, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByTagAndCriteria($id, &$criteria, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntityAndCriteria('Tag', $id, $criteria, $perpage, $sort, $order);
        return $it;
    }

    function countByTagAndCriteria($id, &$criteria)
    {
        return $this->_countByForeignAndCriteria('node2tag_tag_id', $id, $criteria);
    }

    function &_getCollectionByRowset(&$rs)
    {
        $collection =& new Xigg_Model_Node2tagsByRowset($rs, $this->_model->create('Node2tag'), $this->_model);
        return $collection;
    }

    function &createCollection($entities = array(), $key = 0)
    {
        $collection =& new Xigg_Model_Node2tags($this->_model, $entities, $key);
        return $collection;
    }
}

class Xigg_Model_Node2tagsByRowset extends Sabai_Model_EntityCollection_Rowset
{
    function Xigg_Model_Node2tagsByRowset(&$rs, &$emptyEntity, &$model, $key = 0)
    {
        parent::Sabai_Model_EntityCollection_Rowset('Node2tags', $rs, $emptyEntity, $model, $key);
    }

    function _loadRow(&$entity, $row)
    {
        $arr['node2tag_id'] = $row['node2tag_id'];
        $arr['node2tag_created'] = $row['node2tag_created'];
        $arr['node2tag_updated'] = $row['node2tag_updated'];
        $arr['node2tag_node_id'] = $row['node2tag_node_id'];
        $arr['node2tag_tag_id'] = $row['node2tag_tag_id'];
        $entity->initVars($arr);
		if (isset($row['node_id'])) {
            $node['node_id'] = $row['node_id'];
            $node['node_created'] = $row['node_created'];
            $node['node_updated'] = $row['node_updated'];
            $node['node_title'] = $row['node_title'];
            $node['node_source'] = $row['node_source'];
            $node['node_source_title'] = $row['node_source_title'];
            $node['node_content_syntax'] = $row['node_content_syntax'];
            $node['node_body'] = $row['node_body'];
            $node['node_body_html'] = $row['node_body_html'];
            $node['node_teaser'] = $row['node_teaser'];
            $node['node_teaser_html'] = $row['node_teaser_html'];
            $node['node_published'] = $row['node_published'];
            $node['node_allow_comments'] = $row['node_allow_comments'];
            $node['node_allow_trackbacks'] = $row['node_allow_trackbacks'];
            $node['node_allow_edit'] = $row['node_allow_edit'];
            $node['node_status'] = $row['node_status'];
            $node['node_hidden'] = $row['node_hidden'];
            $node['node_priority'] = $row['node_priority'];
            $node['node_views'] = $row['node_views'];
            $node['node_category_id'] = $row['node_category_id'];
            $node['node_userid'] = $row['node_userid'];
            $node['node_comment_count'] = $row['node_comment_count'];
            $node['node_comment_last'] = $row['node_comment_last'];
            $node['node_comment_lasttime'] = $row['node_comment_lasttime'];
            $node['node_trackback_count'] = $row['node_trackback_count'];
            $node['node_trackback_last'] = $row['node_trackback_last'];
            $node['node_trackback_lasttime'] = $row['node_trackback_lasttime'];
            $node['node_vote_count'] = $row['node_vote_count'];
            $node['node_vote_last'] = $row['node_vote_last'];
            $node['node_vote_lasttime'] = $row['node_vote_lasttime'];
            $node['node_view_count'] = $row['node_view_count'];
            $node['node_view_last'] = $row['node_view_last'];
            $node['node_view_lasttime'] = $row['node_view_lasttime'];
            $Node =& $this->_model->create('Node');
            $Node->initVars($node);
            $Node->cache();
		}
		if (isset($row['tag_id'])) {
            $tag['tag_id'] = $row['tag_id'];
            $tag['tag_created'] = $row['tag_created'];
            $tag['tag_updated'] = $row['tag_updated'];
            $tag['tag_name'] = $row['tag_name'];
            $Tag =& $this->_model->create('Tag');
            $Tag->initVars($tag);
            $Tag->cache();
		}
    }
}

class Xigg_Model_Node2tags extends Sabai_Model_EntityCollection_Array
{
    function Xigg_Model_Node2tags(&$model, $entities = array(), $key = 0)
    {
        parent::Sabai_Model_EntityCollection_Array($model, 'Node2tags', $entities, $key);
    }
}