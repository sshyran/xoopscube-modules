<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
Xigg/library/Xigg/Model/Tag.php
*/
class Xigg_Model_TagBase extends Sabai_Model_Entity
{
    function Xigg_Model_TagBase(&$model)
    {
        parent::Sabai_Model_Entity('Tag', $model);
        $this->_vars = array('tag_id' => 0, 'tag_created' => 0, 'tag_updated' => 0, 'tag_name' => null);
    }

    function varNames()
    {
        return array('id' => _('Id'), 'created' => _('Created'), 'updated' => _('Updated'), 'name' => _('Name'));
    }

    function propertyNames()
    {
        return array('name' => _('Name'), 'Nodes' => _('Nodes'));
    }

    function localPropertyNames()
    {
        return array('name' => _('Name'));
    }

    function getId()
    {
        return $this->getVar('id');
    }

    function setId($value)
    {
        $this->setVar('id', $value);
    }

    function getTimeCreated()
    {
        return $this->getVar('created');
    }

    function getTimeUpdated()
    {
        return $this->getVar('updated');
    }

    function getLabel()
    {
        return $this->getVar('name');
    }

    function setLabel($value)
    {
        $this->setVar('name', $value);
    }

    function &linkNode(&$entity)
    {
        $ret = false;
        if ($entity->getName() == 'Node') {
            $ret =& $this->linkNodeById($entity->getId());
        }
        return $ret;
    }

    function &linkNodeById($id)
    {
        $link =& $this->_linkEntityById('Node2tag', 'node_id', $id);
        return $link;
    }

    function unlinkNode(&$entity)
    {
        if ($entity->getName() != 'Node') {
            return 0;
        }
        return $this->unlinkNodeById($entity->getId());
    }

    function unlinkNodeById($id)
    {
        return $this->_unlinkEntityById('Node2tag', 'node2tag_tag_id', 'node2tag_node_id', $id);
    }

    function unlinkNodes()
    {
        return $this->_unlinkEntities('Node2tag');
    }

    function &_fetchNodes($limit = 0, $offset = 0, $sort = null, $order = null)
    {
        if (!isset($this->_objects['Nodes'])) {
            $this->_objects['Nodes'] =& $this->_fetchEntities('Node', $limit, $offset, $sort, $order);
        }
        return $this->_objects['Nodes'];
    }

    function &paginateNodes($perpage = 10, $sort = null, $order = null)
    {
        $pages =& $this->_paginateEntities('Node', $perpage, $sort, $order);
        return $pages;
    }

    function countNodes()
    {
        return $this->_countEntities('Node');
    }

    function _getVar($name)
    {
        return $this->_vars['tag_' . $name];
    }

    function _setVar($name, $value)
    {
        switch ($name) {
        case 'id':
            $this->_vars['tag_id'] = $value;
            break;
        case 'name':
            $this->_vars['tag_name'] = trim($value);
            break;
        default:
            trigger_error(sprintf('Error trying to set value for variable %s. This variable is either read-only or does not exist for this entity', $name), E_USER_WARNING);
            return false;
        }
        return true;
    }

    function &__get($name)
    {
        $ret = null;
        settype($name, 'string');
        switch ($name) {
        case 'name':
            $ret = $this->getVar('name');
            break;
        case 'Nodes':
            $ret =& $this->_fetchNodes();
            break;
        default:
        }
        return $ret;
    }

    function __set($name, $value)
    {
        settype($name, 'string');
        switch ($name) {
        case 'name':
            $this->setVar('name', $value);
            break;
        case 'Nodes':
            $this->unlinkNodes();
            foreach (array_keys($value) as $i) {
                if (is_object($value[$i])) {
                    $this->linkNode($value[$i]);
                } else {
                    $this->linkNodeById($value[$i]);
                }
            }
            break;
        default:
        }
    }

    function initVar($name, $value)
    {
        switch ($name) {
        case 'tag_id':
            $this->_vars['tag_id'] = $value;
            break;
        case 'tag_created':
            $this->_vars['tag_created'] = $value;
            break;
        case 'tag_updated':
            $this->_vars['tag_updated'] = $value;
            break;
        case 'tag_name':
            $this->_vars['tag_name'] = $value;
            break;
        default:
        }
    }
}

class Xigg_Model_TagRepositoryBase extends Sabai_Model_EntityRepository
{
    function Xigg_Model_TagRepositoryBase(&$model)
    {
        parent::Sabai_Model_EntityRepository('Tag', $model);
    }

    function &fetchByNode($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByAssoc('tag', 'Node2tag', 'node2tag_node_id', $id, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByNode($id, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntity('Node', $id, $perpage, $sort, $order);
        return $it;
    }

    function countByNode($id)
    {
        return $this->_countByAssoc('tag_id', 'Node2tag', 'node2tag_node_id', $id);
    }

    function &fetchByNodeAndCriteria($id, &$criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByAssocAndCriteria('tag', 'Node2tag', 'node2tag_node_id', $id, $criteria, $limit, $offset, $sort, $order);
        return $it;
    }

    function countByNodeAndCriteria($id, &$criteria)
    {
        return $this->_countByAssocAndCriteria('tag_id', 'Node2tag', 'node2tag_node_id', $id, $criteria);
    }

    function &paginateByNodeAndCriteria($id, &$criteria, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntityAndCriteria('Node', $id, $criteria, $perpage, $sort, $order);
        return $it;
    }

    function &_getCollectionByRowset(&$rs)
    {
        $collection =& new Xigg_Model_TagsByRowset($rs, $this->_model->create('Tag'), $this->_model);
        return $collection;
    }

    function &createCollection($entities = array(), $key = 0)
    {
        $collection =& new Xigg_Model_Tags($this->_model, $entities, $key);
        return $collection;
    }
}

class Xigg_Model_TagsByRowset extends Sabai_Model_EntityCollection_Rowset
{
    function Xigg_Model_TagsByRowset(&$rs, &$emptyEntity, &$model, $key = 0)
    {
        parent::Sabai_Model_EntityCollection_Rowset('Tags', $rs, $emptyEntity, $model, $key);
    }

    function _loadRow(&$entity, $row)
    {
        $entity->initVars($row);
    }
}

class Xigg_Model_Tags extends Sabai_Model_EntityCollection_Array
{
    function Xigg_Model_Tags(&$model, $entities = array(), $key = 0)
    {
        parent::Sabai_Model_EntityCollection_Array($model, 'Tags', $entities, $key);
    }
}