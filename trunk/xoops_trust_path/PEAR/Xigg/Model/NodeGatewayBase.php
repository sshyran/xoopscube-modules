<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
Xigg/library/Xigg/Model/NodeGateway.php
*/
class Xigg_Model_NodeGatewayBase extends Sabai_Model_Gateway
{
    function getName()
    {
        return 'node';
    }

    function getFields()
    {
        return array('node_id' => SABAI_MODEL_KEY_TYPE_INT, 'node_created' => SABAI_MODEL_KEY_TYPE_INT, 'node_updated' => SABAI_MODEL_KEY_TYPE_INT, 'node_title' => SABAI_MODEL_KEY_TYPE_VARCHAR, 'node_source' => SABAI_MODEL_KEY_TYPE_VARCHAR, 'node_source_title' => SABAI_MODEL_KEY_TYPE_VARCHAR, 'node_content_syntax' => SABAI_MODEL_KEY_TYPE_VARCHAR, 'node_body' => SABAI_MODEL_KEY_TYPE_TEXT, 'node_body_html' => SABAI_MODEL_KEY_TYPE_TEXT, 'node_teaser' => SABAI_MODEL_KEY_TYPE_TEXT, 'node_teaser_html' => SABAI_MODEL_KEY_TYPE_TEXT, 'node_published' => SABAI_MODEL_KEY_TYPE_INT, 'node_allow_comments' => SABAI_MODEL_KEY_TYPE_INT, 'node_allow_trackbacks' => SABAI_MODEL_KEY_TYPE_INT, 'node_allow_edit' => SABAI_MODEL_KEY_TYPE_INT, 'node_status' => SABAI_MODEL_KEY_TYPE_INT, 'node_hidden' => SABAI_MODEL_KEY_TYPE_INT, 'node_priority' => SABAI_MODEL_KEY_TYPE_INT, 'node_views' => SABAI_MODEL_KEY_TYPE_INT, 'node_category_id' => SABAI_MODEL_KEY_TYPE_INT_NULL, 'node_userid' => SABAI_MODEL_KEY_TYPE_VARCHAR, 'node_comment_count' => SABAI_MODEL_KEY_TYPE_INT, 'node_comment_last' => SABAI_MODEL_KEY_TYPE_INT, 'node_comment_lasttime' => SABAI_MODEL_KEY_TYPE_INT, 'node_trackback_count' => SABAI_MODEL_KEY_TYPE_INT, 'node_trackback_last' => SABAI_MODEL_KEY_TYPE_INT, 'node_trackback_lasttime' => SABAI_MODEL_KEY_TYPE_INT, 'node_vote_count' => SABAI_MODEL_KEY_TYPE_INT, 'node_vote_last' => SABAI_MODEL_KEY_TYPE_INT, 'node_vote_lasttime' => SABAI_MODEL_KEY_TYPE_INT, 'node_view_count' => SABAI_MODEL_KEY_TYPE_INT, 'node_view_last' => SABAI_MODEL_KEY_TYPE_INT, 'node_view_lasttime' => SABAI_MODEL_KEY_TYPE_INT);
    }

    function _getSelectByIdQuery($id, $fields)
    {
        $fields = empty($fields) ? '*' : implode(', t.', $fields);
        return sprintf('SELECT t.%s FROM %snode t WHERE node_id = %d', $fields, $this->_db->getResourcePrefix(), $id);
    }

    function _getSelectByCriteriaQuery($criteriaStr, $fields)
    {
        $fields = empty($fields) ? '*' : implode(', t.', $fields);
        return sprintf('SELECT t.%1$s FROM %2$snode t WHERE %3$s', $fields, $this->_db->getResourcePrefix(), $criteriaStr);
    }

    function _getInsertQuery($values)
    {
        $values['node_created'] = time();
        $values['node_updated'] = 0;
        $values['node_comment_lasttime'] = $values['node_created'];
        $values['node_trackback_lasttime'] = $values['node_created'];
        $values['node_vote_lasttime'] = $values['node_created'];
        $values['node_view_lasttime'] = $values['node_created'];
        $values['node_category_id'] = !empty($values['node_category_id']) ? intval($values['node_category_id']) : 'NULL';
        return sprintf("INSERT INTO %snode(node_created, node_updated, node_title, node_source, node_source_title, node_content_syntax, node_body, node_body_html, node_teaser, node_teaser_html, node_published, node_allow_comments, node_allow_trackbacks, node_allow_edit, node_status, node_hidden, node_priority, node_views, node_category_id, node_userid, node_comment_count, node_comment_last, node_comment_lasttime, node_trackback_count, node_trackback_last, node_trackback_lasttime, node_vote_count, node_vote_last, node_vote_lasttime, node_view_count, node_view_last, node_view_lasttime) VALUES(%d, %d, %s, %s, %s, %s, %s, %s, %s, %s, %d, %d, %d, %d, %d, %d, %d, %d, %s, %s, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d)", $this->_db->getResourcePrefix(), $values['node_created'], $values['node_updated'], $this->_db->escapeString($values['node_title']), $this->_db->escapeString($values['node_source']), $this->_db->escapeString($values['node_source_title']), $this->_db->escapeString($values['node_content_syntax']), $this->_db->escapeString($values['node_body']), $this->_db->escapeString($values['node_body_html']), $this->_db->escapeString($values['node_teaser']), $this->_db->escapeString($values['node_teaser_html']), $values['node_published'], $values['node_allow_comments'], $values['node_allow_trackbacks'], $values['node_allow_edit'], $values['node_status'], $values['node_hidden'], $values['node_priority'], $values['node_views'], $values['node_category_id'], $this->_db->escapeString($values['node_userid']), $values['node_comment_count'], $values['node_comment_last'], $values['node_comment_lasttime'], $values['node_trackback_count'], $values['node_trackback_last'], $values['node_trackback_lasttime'], $values['node_vote_count'], $values['node_vote_last'], $values['node_vote_lasttime'], $values['node_view_count'], $values['node_view_last'], $values['node_view_lasttime']);
    }

    function _getUpdateQuery($id, $values)
    {
        $values['node_category_id'] = !empty($values['node_category_id']) ? intval($values['node_category_id']) : 'NULL';
        $last_update = $values['node_updated'];
        $values['node_updated'] = time();
        return sprintf("UPDATE %snode SET node_updated = %d, node_title = %s, node_source = %s, node_source_title = %s, node_content_syntax = %s, node_body = %s, node_body_html = %s, node_teaser = %s, node_teaser_html = %s, node_published = %d, node_allow_comments = %d, node_allow_trackbacks = %d, node_allow_edit = %d, node_status = %d, node_hidden = %d, node_priority = %d, node_views = %d, node_category_id = %s, node_userid = %s, node_comment_count = %d, node_comment_last = %d, node_comment_lasttime = %d, node_trackback_count = %d, node_trackback_last = %d, node_trackback_lasttime = %d, node_vote_count = %d, node_vote_last = %d, node_vote_lasttime = %d, node_view_count = %d, node_view_last = %d, node_view_lasttime = %d WHERE node_id = %d AND node_updated = %d", $this->_db->getResourcePrefix(), $values['node_updated'], $this->_db->escapeString($values['node_title']), $this->_db->escapeString($values['node_source']), $this->_db->escapeString($values['node_source_title']), $this->_db->escapeString($values['node_content_syntax']), $this->_db->escapeString($values['node_body']), $this->_db->escapeString($values['node_body_html']), $this->_db->escapeString($values['node_teaser']), $this->_db->escapeString($values['node_teaser_html']), $values['node_published'], $values['node_allow_comments'], $values['node_allow_trackbacks'], $values['node_allow_edit'], $values['node_status'], $values['node_hidden'], $values['node_priority'], $values['node_views'], $values['node_category_id'], $this->_db->escapeString($values['node_userid']), $values['node_comment_count'], $values['node_comment_last'], $values['node_comment_lasttime'], $values['node_trackback_count'], $values['node_trackback_last'], $values['node_trackback_lasttime'], $values['node_vote_count'], $values['node_vote_last'], $values['node_vote_lasttime'], $values['node_view_count'], $values['node_view_last'], $values['node_view_lasttime'], $id, $last_update);
    }

    function _getDeleteQuery($id)
    {
        return sprintf('DELETE FROM %1$snode WHERE node_id = %2$d', $this->_db->getResourcePrefix(), $id);
    }

    function _getUpdateByCriteriaQuery($criteriaStr, $sets)
    {
        $sets['node_updated'] = 'node_updated=' . time();
        return sprintf('UPDATE %snode SET %s WHERE %s', $this->_db->getResourcePrefix(), implode(',', $sets), $criteriaStr);
    }

    function _getDeleteByCriteriaQuery($criteriaStr)
    {
        return sprintf('DELETE FROM %1$snode WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    function _getCountByCriteriaQuery($criteriaStr)
    {
        return sprintf('SELECT COUNT(*) FROM %1$snode WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    function _afterInsertTrigger1($id, $new)
    {
        if (!empty($new['node_category_id'])) {
            $this->_db->exec(sprintf('UPDATE %scategory SET category_node_count = category_node_count + 1, category_node_last = %d, category_node_lasttime = %d WHERE category_id = %d', $this->_db->getResourcePrefix(), $id, $new['node_created'], $new['node_category_id']));
        }
    }

    function _afterDeleteTrigger1($id, $old)
    {
        if (!empty($old['node_category_id'])) {
            $sql = sprintf('SELECT node_id, node_created FROM %snode WHERE node_category_id = %d ORDER BY node_created DESC', $this->_db->getResourcePrefix(), $old['node_category_id']);
            if (($rs =& $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %scategory SET category_node_count = category_node_count - 1, category_node_last = %d, category_node_lasttime = %d WHERE category_id = %d', $this->_db->getResourcePrefix(), $row['node_id'], $row['node_created'], $old['node_category_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %scategory SET category_node_count = category_node_count - 1, category_node_last = 0, category_node_lasttime = category_created WHERE category_id = %d', $this->_db->getResourcePrefix(), $old['node_category_id']));
            }
        }
    }

    function _afterUpdateTrigger1($id, $new, $old)
    {
        if (empty($old['node_category_id']) && !empty($new['node_category_id'])) {
            $this->_db->exec(sprintf('UPDATE %scategory SET category_node_count = category_node_count + 1, category_node_last = %d, category_node_lasttime = %d WHERE category_id = %d', $this->_db->getResourcePrefix(), $id, $new['node_created'], $new['node_category_id']));
        } elseif (!empty($old['node_category_id']) && empty($new['node_category_id'])) {
            $sql = sprintf('SELECT node_id, node_created FROM %snode WHERE node_category_id = %d ORDER BY node_created DESC', $this->_db->getResourcePrefix(), $old['node_category_id']);
            if (($rs =& $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %scategory SET category_node_count = category_node_count - 1, category_node_last = %d, category_node_lasttime = %d WHERE category_id = %d', $this->_db->getResourcePrefix(), $row['node_id'], $row['node_created'], $old['node_category_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %scategory SET category_node_count = category_node_count - 1, category_node_last = 0, category_node_lasttime = category_created WHERE category_id = %d', $this->_db->getResourcePrefix(), $old['node_category_id']));
            }
        } elseif ($old['node_category_id'] != $new['node_category_id']) {
            $sql = sprintf('SELECT node_id, node_created FROM %snode WHERE node_category_id = %d ORDER BY node_created DESC', $this->_db->getResourcePrefix(), $old['node_category_id']);
            if (($rs =& $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %scategory SET category_node_count = category_node_count - 1, category_node_last = %d, category_node_lasttime = %d WHERE category_id = %d', $this->_db->getResourcePrefix(), $row['node_id'], $row['node_created'], $old['node_category_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %scategory SET category_node_count = category_node_count - 1, category_node_last = 0, category_node_lasttime = category_created WHERE category_id = %d', $this->_db->getResourcePrefix(), $old['node_category_id']));
            }
            $this->_db->exec(sprintf('UPDATE %scategory SET category_node_count = category_node_count + 1, category_node_last = %d, category_node_lasttime = %d WHERE category_id = %d', $this->_db->getResourcePrefix(), $id, $new['node_created'], $new['node_category_id']));
        }
    }

    function _beforeDeleteTrigger1($id, $old)
    {
        return $this->_db->exec(sprintf('UPDATE %scomment SET comment_node_id = NULL WHERE comment_node_id = %d', $this->_db->getResourcePrefix(), $id), false);
    }

    function _beforeDeleteTrigger2($id, $old)
    {
        return $this->_db->exec(sprintf('DELETE %1$strackback FROM %1$strackback WHERE %1$strackback.trackback_node_id = %2$d', $this->_db->getResourcePrefix(), $id), false);
    }

    function _beforeDeleteTrigger3($id, $old)
    {
        return $this->_db->exec(sprintf('DELETE %1$svote FROM %1$svote WHERE %1$svote.vote_node_id = %2$d', $this->_db->getResourcePrefix(), $id), false);
    }

    function _beforeDeleteTrigger4($id, $old)
    {
        return $this->_db->exec(sprintf('DELETE %1$sview FROM %1$sview WHERE %1$sview.view_node_id = %2$d', $this->_db->getResourcePrefix(), $id), false);
    }

    function _beforeDeleteTrigger5($id, $old)
    {
        return $this->_db->exec(sprintf('DELETE %1$snode2tag FROM %1$snode2tag WHERE %1$snode2tag.node2tag_node_id = %2$d', $this->_db->getResourcePrefix(), $id), false);
    }

    function _afterInsertTrigger($id, $new)
    {
        $this->_afterInsertTrigger1($id, $new);
    }

    function _afterUpdateTrigger($id, $new, $old)
    {
        $this->_afterUpdateTrigger1($id, $new, $old);
    }

    function _beforeDeleteTrigger($id, $old)
    {
        if (!$this->_beforeDeleteTrigger1($id, $old)) {
            return false;
        }
        if (!$this->_beforeDeleteTrigger2($id, $old)) {
            return false;
        }
        if (!$this->_beforeDeleteTrigger3($id, $old)) {
            return false;
        }
        if (!$this->_beforeDeleteTrigger4($id, $old)) {
            return false;
        }
        if (!$this->_beforeDeleteTrigger5($id, $old)) {
            return false;
        }
        return true;
    }

    function _afterDeleteTrigger($id, $old)
    {
        $this->_afterDeleteTrigger1($id, $old);
    }
}