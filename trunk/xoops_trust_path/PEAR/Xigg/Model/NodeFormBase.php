<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
Xigg/library/Xigg/Model/NodeForm.php
*/
class Xigg_Model_NodeFormBase extends Sabai_Model_EntityForm
{
    function onInit($params)
    {
        require_once 'Sabai/Form/Element/InputText.php';
        $this->addElement(new Sabai_Form_Element_InputText('title', 80, 255), _('Title'));
        require_once 'Sabai/Form/Element/InputText.php';
        $this->addElement(new Sabai_Form_Element_InputText('source', 80, 255), _('Source'));
        require_once 'Sabai/Form/Element/InputText.php';
        $this->addElement(new Sabai_Form_Element_InputText('source_title', 80, 255), _('Source title'));
        require_once 'Sabai/Form/Element/SelectDropdown.php';
        $this->addElement(new Sabai_Form_Element_SelectDropdown('content_syntax', 1, false), _('Content syntax'));
        require_once 'Sabai/Form/Element/Textarea.php';
        $this->addElement(new Sabai_Form_Element_Textarea('body', 20, 70), _('Body'));
        require_once 'Sabai/Form/Element/Textarea.php';
        $this->addElement(new Sabai_Form_Element_Textarea('body_html', 20, 70), _('Body html'));
        require_once 'Sabai/Form/Element/Textarea.php';
        $this->addElement(new Sabai_Form_Element_Textarea('teaser', 10, 70), _('Teaser'));
        require_once 'Sabai/Form/Element/Textarea.php';
        $this->addElement(new Sabai_Form_Element_Textarea('teaser_html', 10, 70), _('Teaser html'));
        require_once 'Sabai/Form/Element/Text.php';
        $this->addElement(new Sabai_Form_Element_Text('published'), _('Published'));
        require_once 'Sabai/Form/Element/SelectYesNo.php';
        $this->addElement(new Sabai_Form_Element_SelectYesNo('allow_comments', _('Yes'), _('No')), _('Allow comments'));
        require_once 'Sabai/Form/Element/SelectYesNo.php';
        $this->addElement(new Sabai_Form_Element_SelectYesNo('allow_trackbacks', _('Yes'), _('No')), _('Allow trackbacks'));
        require_once 'Sabai/Form/Element/SelectYesNo.php';
        $this->addElement(new Sabai_Form_Element_SelectYesNo('allow_edit', _('Yes'), _('No')), _('Allow edit'));
        require_once 'Sabai/Form/Element/SelectRadioButton.php';
        $this->addElement(new Sabai_Form_Element_SelectRadioButton('status'), _('Status'));
        require_once 'Sabai/Form/Element/SelectYesNo.php';
        $this->addElement(new Sabai_Form_Element_SelectYesNo('hidden', _('Yes'), _('No')), _('Hidden'));
        require_once 'Sabai/Form/Element/InputText.php';
        $this->addElement(new Sabai_Form_Element_InputText('priority', 6, 255), _('Priority'));
        require_once 'Sabai/Form/Element/InputText.php';
        $this->addElement(new Sabai_Form_Element_InputText('views', 6, 255), _('Views'));
        require_once 'Sabai/Form/Element/SelectTreeEntity.php';
        $element =& new Sabai_Form_Element_SelectTreeEntity($this->_model, 'Category', 'Category', 1, ' - ');
        $this->addElement($element, _('category'));
        require_once 'Sabai/Form/Element/SelectEntity.php';
        $element =& new Sabai_Form_Element_SelectEntity($this->_model, 'Tag', 'Tags', 5, true);
        $this->addElement($element, _('Tag'));
        require_once 'Sabai/Form/Element/InputText.php';
        $this->addElement(new Sabai_Form_Element_InputText('userid', 30, 255), _('User ID'));
        $this->_onInit($params);
    }

    function onEntity(&$entity)
    {
        if ($this->hasElement('title')) {
            $this->setValueFor('title', $entity->getVar('title'));
        }
        if ($this->hasElement('source')) {
            $this->setValueFor('source', $entity->getVar('source'));
        }
        if ($this->hasElement('source_title')) {
            $this->setValueFor('source_title', $entity->getVar('source_title'));
        }
        if ($this->hasElement('content_syntax')) {
            $this->setValueFor('content_syntax', $entity->getVar('content_syntax'));
        }
        if ($this->hasElement('body')) {
            $this->setValueFor('body', $entity->getVar('body'));
        }
        if ($this->hasElement('body_html')) {
            $this->setValueFor('body_html', $entity->getVar('body_html'));
        }
        if ($this->hasElement('teaser')) {
            $this->setValueFor('teaser', $entity->getVar('teaser'));
        }
        if ($this->hasElement('teaser_html')) {
            $this->setValueFor('teaser_html', $entity->getVar('teaser_html'));
        }
        if ($this->hasElement('published')) {
            $this->setValueFor('published', $entity->getVar('published'));
        }
        if ($this->hasElement('allow_comments')) {
            $this->setValueFor('allow_comments', $entity->getVar('allow_comments'));
        }
        if ($this->hasElement('allow_trackbacks')) {
            $this->setValueFor('allow_trackbacks', $entity->getVar('allow_trackbacks'));
        }
        if ($this->hasElement('allow_edit')) {
            $this->setValueFor('allow_edit', $entity->getVar('allow_edit'));
        }
        if ($this->hasElement('status')) {
            $this->setValueFor('status', $entity->getVar('status'));
        }
        if ($this->hasElement('hidden')) {
            $this->setValueFor('hidden', $entity->getVar('hidden'));
        }
        if ($this->hasElement('priority')) {
            $this->setValueFor('priority', $entity->getVar('priority'));
        }
        if ($this->hasElement('views')) {
            $this->setValueFor('views', $entity->getVar('views'));
        }
        if ($this->hasElement('Category')) {
            $this->setValueFor('Category', $entity->getVar('category_id'));
        }
        if ($this->hasElement('Tags')) {
            $tag_entities =& $entity->get('Tags');
            $value = array();
            $tag_entities->rewind();
            while ($obj =& $tag_entities->getNext()) {
                $value[] = $obj->getId();
                unset($obj);
            }
            $this->setValueFor('Tags', $value);
        }
        if ($this->hasElement('userid')) {
            $this->setValueFor('userid', $entity->getVar('userid'));
        }
        $this->_onEntity($entity);
    }

    function onFillEntity(&$entity)
    {
        $vars = array();
        foreach (array('title' => 'title', 'source' => 'source', 'source_title' => 'source_title', 'content_syntax' => 'content_syntax', 'body' => 'body', 'body_html' => 'body_html', 'teaser' => 'teaser', 'teaser_html' => 'teaser_html', 'published' => 'published', 'allow_comments' => 'allow_comments', 'allow_trackbacks' => 'allow_trackbacks', 'allow_edit' => 'allow_edit', 'status' => 'status', 'hidden' => 'hidden', 'priority' => 'priority', 'views' => 'views', 'category_id' => 'Category', 'userid' => 'userid') as $var_name => $form_name) {
            if ($this->hasElement($form_name)) {
                $vars[$var_name] = $this->getValueFor($form_name);
            }
        }
        $entity->setVars($vars);
        if ($this->hasElement('Tags')) {
            $entity->set('Tags', $this->getValueFor('Tags'));
        }
        $this->_onFillEntity($entity);
    }

    function _onInit($params){}
    function _onEntity(&$entity){}
    function _onFillEntity(&$entity){}
}