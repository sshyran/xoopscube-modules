<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
Xigg/library/Xigg/Model/Member.php
*/
class Xigg_Model_MemberBase extends Sabai_Model_Entity
{
    function Xigg_Model_MemberBase(&$model)
    {
        parent::Sabai_Model_Entity('Member', $model);
        $this->_vars = array('member_id' => 0, 'member_created' => 0, 'member_updated' => 0, 'member_role_id' => null, 'member_userid' => null);
    }

    function varNames()
    {
        return array('id' => _('Id'), 'created' => _('Created'), 'updated' => _('Updated'), 'role_id' => _('Role id'), 'userid' => _('Userid'));
    }

    function propertyNames()
    {
        return array('Role' => 'Role');
    }

    function localPropertyNames()
    {
        return array();
    }

    function getUserId()
    {
        return $this->getVar('userid');
    }

    function assignUser(&$user)
    {
        $this->_setVar('userid', $user->getId());
    }

    function &_fetchUser()
    {
        if (!isset($this->_objects['User'])) {
            $user_id = $this->getUserId();
            $identities = $this->_model->fetchUserIdentities(array($user_id));
            $this->_objects['User'] =& $identities[$user_id];
        }
        return $this->_objects['User'];
    }

    function isOwnedBy(&$user)
    {
        return $this->getUserId() == $user->getId();
    }

    function getId()
    {
        return $this->getVar('id');
    }

    function setId($value)
    {
        $this->setVar('id', $value);
    }

    function getTimeCreated()
    {
        return $this->getVar('created');
    }

    function getTimeUpdated()
    {
        return $this->getVar('updated');
    }

    function assignRole(&$entity)
    {
        if ($entity->getName() != 'Role') {
            return false;
        }
        return $this->_assignEntity('role_id', $entity);
    }

    function unassignRole()
    {
        return $this->_unassignEntity('role_id');
    }

    function &_fetchRole()
    {
        if (!isset($this->_objects['Role'])) {
            $this->_objects['Role'] =& $this->_fetchEntity('Role', 'role_id');
        }
        return $this->_objects['Role'];
    }

    function _getVar($name)
    {
        return $this->_vars['member_' . $name];
    }

    function _setVar($name, $value)
    {
        switch ($name) {
        case 'id':
            $this->_vars['member_id'] = $value;
            break;
        case 'role_id':
            $this->_vars['member_role_id'] = $value;
            break;
        case 'userid':
            $this->_vars['member_userid'] = trim($value);
            break;
        default:
            trigger_error(sprintf('Error trying to set value for variable %s. This variable is either read-only or does not exist for this entity', $name), E_USER_WARNING);
            return false;
        }
        return true;
    }

    function &__get($name)
    {
        $ret = null;
        settype($name, 'string');
        switch ($name) {
        case 'Role':
            $ret =& $this->_fetchRole();
            break;
        case 'User':
            $ret =& $this->_fetchUser();
            break;
        default:
        }
        return $ret;
    }

    function __set($name, $value)
    {
        settype($name, 'string');
        switch ($name) {
        case 'Role':
            if (is_array($value)) {
                $entity =& $value[0];
            } else {
                $entity =& $value;
            }
            $this->assignRole($entity);
            break;
        default:
        }
    }

    function initVar($name, $value)
    {
        switch ($name) {
        case 'member_id':
            $this->_vars['member_id'] = $value;
            break;
        case 'member_created':
            $this->_vars['member_created'] = $value;
            break;
        case 'member_updated':
            $this->_vars['member_updated'] = $value;
            break;
        case 'member_role_id':
            $this->_vars['member_role_id'] = $value;
            break;
        case 'member_userid':
            $this->_vars['member_userid'] = $value;
            break;
        default:
        }
    }
}

class Xigg_Model_MemberRepositoryBase extends Sabai_Model_EntityRepository
{
    function Xigg_Model_MemberRepositoryBase(&$model)
    {
        parent::Sabai_Model_EntityRepository('Member', $model);
    }
    function &fetchByUser($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByForeign('member_userid', $id, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByUser($id, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntity('User', $id, $perpage, $sort, $order);
        return $it;
    }

    function countByUser($id)
    {
        return $this->_countByForeign('member_userid', $id);
    }

    function &fetchByUserAndCriteria($id, &$criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByForeignAndCriteria('member_userid', $id, $criteria, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByUserAndCriteria($id, &$criteria, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntityAndCriteria('User', $id, $criteria, $perpage, $sort, $order);
        return $it;
    }

    function countByUserAndCriteria($id, &$criteria)
    {
        return $this->_countByForeignAndCriteria('member_userid', $id, $criteria);
    }

    function &fetchByRole($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByForeign('member_role_id', $id, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByRole($id, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntity('Role', $id, $perpage, $sort, $order);
        return $it;
    }

    function countByRole($id)
    {
        return $this->_countByForeign('member_role_id', $id);
    }

    function &fetchByRoleAndCriteria($id, &$criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByForeignAndCriteria('member_role_id', $id, $criteria, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByRoleAndCriteria($id, &$criteria, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntityAndCriteria('Role', $id, $criteria, $perpage, $sort, $order);
        return $it;
    }

    function countByRoleAndCriteria($id, &$criteria)
    {
        return $this->_countByForeignAndCriteria('member_role_id', $id, $criteria);
    }

    function &_getCollectionByRowset(&$rs)
    {
        $collection =& new Xigg_Model_MembersByRowset($rs, $this->_model->create('Member'), $this->_model);
        return $collection;
    }

    function &createCollection($entities = array(), $key = 0)
    {
        $collection =& new Xigg_Model_Members($this->_model, $entities, $key);
        return $collection;
    }
}

class Xigg_Model_MembersByRowset extends Sabai_Model_EntityCollection_Rowset
{
    function Xigg_Model_MembersByRowset(&$rs, &$emptyEntity, &$model, $key = 0)
    {
        parent::Sabai_Model_EntityCollection_Rowset('Members', $rs, $emptyEntity, $model, $key);
    }

    function _loadRow(&$entity, $row)
    {
        $entity->initVars($row);
    }
}

class Xigg_Model_Members extends Sabai_Model_EntityCollection_Array
{
    function Xigg_Model_Members(&$model, $entities = array(), $key = 0)
    {
        parent::Sabai_Model_EntityCollection_Array($model, 'Members', $entities, $key);
    }
}