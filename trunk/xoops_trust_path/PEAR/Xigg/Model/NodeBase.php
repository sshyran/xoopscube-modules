<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
Xigg/library/Xigg/Model/Node.php
*/
class Xigg_Model_NodeBase extends Sabai_Model_Entity
{
    function Xigg_Model_NodeBase(&$model)
    {
        parent::Sabai_Model_Entity('Node', $model);
        $this->_vars = array('node_id' => 0, 'node_created' => 0, 'node_updated' => 0, 'node_title' => null, 'node_source' => null, 'node_source_title' => null, 'node_content_syntax' => null, 'node_body' => null, 'node_body_html' => null, 'node_teaser' => null, 'node_teaser_html' => null, 'node_published' => 0, 'node_allow_comments' => 1, 'node_allow_trackbacks' => 1, 'node_allow_edit' => 1, 'node_status' => 0, 'node_hidden' => 0, 'node_priority' => 0, 'node_views' => 0, 'node_category_id' => null, 'node_userid' => null, 'node_comment_count' => 0, 'node_comment_last' => 0, 'node_comment_lasttime' => 0, 'node_trackback_count' => 0, 'node_trackback_last' => 0, 'node_trackback_lasttime' => 0, 'node_vote_count' => 0, 'node_vote_last' => 0, 'node_vote_lasttime' => 0, 'node_view_count' => 0, 'node_view_last' => 0, 'node_view_lasttime' => 0);
    }

    function varNames()
    {
        return array('id' => _('Id'), 'created' => _('Created'), 'updated' => _('Updated'), 'title' => _('Title'), 'source' => _('Source'), 'source_title' => _('Source title'), 'content_syntax' => _('Content syntax'), 'body' => _('Body'), 'body_html' => _('Body html'), 'teaser' => _('Teaser'), 'teaser_html' => _('Teaser html'), 'published' => _('Published'), 'allow_comments' => _('Allow comments'), 'allow_trackbacks' => _('Allow trackbacks'), 'allow_edit' => _('Allow edit'), 'status' => _('Status'), 'hidden' => _('Hidden'), 'priority' => _('Priority'), 'views' => _('Views'), 'category_id' => _('Category id'), 'userid' => _('Userid'), 'comment_count' => _('Comment count'), 'comment_last' => _('Comment last'), 'comment_lasttime' => _('Comment lasttime'), 'trackback_count' => _('Trackback count'), 'trackback_last' => _('Trackback last'), 'trackback_lasttime' => _('Trackback lasttime'), 'vote_count' => _('Vote count'), 'vote_last' => _('Vote last'), 'vote_lasttime' => _('Vote lasttime'), 'view_count' => _('View count'), 'view_last' => _('View last'), 'view_lasttime' => _('View lasttime'));
    }

    function propertyNames()
    {
        return array('title' => _('Title'), 'source' => _('Source'), 'source_title' => _('Source title'), 'content_syntax' => _('Content syntax'), 'body' => _('Body'), 'body_html' => _('Body html'), 'teaser' => _('Teaser'), 'teaser_html' => _('Teaser html'), 'published' => _('Published'), 'allow_comments' => _('Allow comments'), 'allow_trackbacks' => _('Allow trackbacks'), 'allow_edit' => _('Allow edit'), 'status' => _('Status'), 'hidden' => _('Hidden'), 'priority' => _('Priority'), 'views' => _('Views'), 'Category' => 'Category', 'Comments' => _('Comments'), 'Trackbacks' => _('Trackbacks'), 'Votes' => _('Votes'), 'Views' => _('Views'), 'Tags' => _('Tags'));
    }

    function localPropertyNames()
    {
        return array('title' => _('Title'), 'source' => _('Source'), 'source_title' => _('Source title'), 'content_syntax' => _('Content syntax'), 'body' => _('Body'), 'body_html' => _('Body html'), 'teaser' => _('Teaser'), 'teaser_html' => _('Teaser html'), 'published' => _('Published'), 'allow_comments' => _('Allow comments'), 'allow_trackbacks' => _('Allow trackbacks'), 'allow_edit' => _('Allow edit'), 'status' => _('Status'), 'hidden' => _('Hidden'), 'priority' => _('Priority'), 'views' => _('Views'));
    }

    function getUserId()
    {
        return $this->getVar('userid');
    }

    function assignUser(&$user)
    {
        $this->_setVar('userid', $user->getId());
    }

    function &_fetchUser()
    {
        if (!isset($this->_objects['User'])) {
            $user_id = $this->getUserId();
            $identities = $this->_model->fetchUserIdentities(array($user_id));
            $this->_objects['User'] =& $identities[$user_id];
        }
        return $this->_objects['User'];
    }

    function isOwnedBy(&$user)
    {
        return $this->getUserId() == $user->getId();
    }

    function getId()
    {
        return $this->getVar('id');
    }

    function setId($value)
    {
        $this->setVar('id', $value);
    }

    function getTimeCreated()
    {
        return $this->getVar('created');
    }

    function getTimeUpdated()
    {
        return $this->getVar('updated');
    }

    function getLabel()
    {
        return $this->getVar('title');
    }

    function setLabel($value)
    {
        $this->setVar('title', $value);
    }

    function getCommentCount()
    {
        return $this->getVar('comment_count');
    }

    function hasLastComment()
    {
        $last_id = $this->getVar('comment_last');
        return !empty($last_id);
    }

    function getTrackbackCount()
    {
        return $this->getVar('trackback_count');
    }

    function hasLastTrackback()
    {
        $last_id = $this->getVar('trackback_last');
        return !empty($last_id);
    }

    function getVoteCount()
    {
        return $this->getVar('vote_count');
    }

    function hasLastVote()
    {
        $last_id = $this->getVar('vote_last');
        return !empty($last_id);
    }

    function getViewCount()
    {
        return $this->getVar('view_count');
    }

    function hasLastView()
    {
        $last_id = $this->getVar('view_last');
        return !empty($last_id);
    }

    function assignCategory(&$entity)
    {
        if ($entity->getName() != 'Category') {
            return false;
        }
        return $this->_assignEntity('category_id', $entity);
    }

    function unassignCategory()
    {
        return $this->_unassignEntity('category_id');
    }

    function &_fetchCategory()
    {
        if (!isset($this->_objects['Category'])) {
            $this->_objects['Category'] =& $this->_fetchEntity('Category', 'category_id');
        }
        return $this->_objects['Category'];
    }

    function addComment(&$entity)
    {
        if ($entity->getName() != 'Comment') {
            return false;
        }
        return $this->_addEntity($entity);
    }

    function removeComment(&$entity)
    {
        if ($entity->getName() != 'Comment') {
            return;
        }
        return $this->removeCommentById($entity->getId());
    }

    function removeCommentById($id)
    {
        return $this->_removeEntityById('comment_id', 'Comment', $id);
    }

    function &createComment()
    {
        $entity =& $this->_createEntity('Comment');
        return $entity;
    }

    function &_fetchComments()
    {
        if (!isset($this->_objects['Comments'])) {
            $this->_objects['Comments'] =& $this->_fetchEntities('Comment');
        }
        return $this->_objects['Comments'];
    }

    function &_fetchLastComment()
    {
        if (!isset($this->_objects['LastComment']) && $this->hasLastComment()) {
            $it =& $this->_fetchEntities('Comment', 1, 0, 'comment_created', 'DESC');
            $this->_objects['LastComment'] =& $it->getNext();
        }
        return $this->_objects['LastComment'];
    }

    function &paginateComments($perpage = 10, $sort = null, $order = null)
    {
        $pages =& $this->_paginateEntities('Comment', $perpage, $sort, $order);
        return $pages;
    }

    function removeComments()
    {
        return $this->_removeEntities('Comment');
    }

    function countComments()
    {
        return $this->_countEntities('Comment');
    }

    function addTrackback(&$entity)
    {
        if ($entity->getName() != 'Trackback') {
            return false;
        }
        return $this->_addEntity($entity);
    }

    function removeTrackback(&$entity)
    {
        if ($entity->getName() != 'Trackback') {
            return;
        }
        return $this->removeTrackbackById($entity->getId());
    }

    function removeTrackbackById($id)
    {
        return $this->_removeEntityById('trackback_id', 'Trackback', $id);
    }

    function &createTrackback()
    {
        $entity =& $this->_createEntity('Trackback');
        return $entity;
    }

    function &_fetchTrackbacks()
    {
        if (!isset($this->_objects['Trackbacks'])) {
            $this->_objects['Trackbacks'] =& $this->_fetchEntities('Trackback');
        }
        return $this->_objects['Trackbacks'];
    }

    function &_fetchLastTrackback()
    {
        if (!isset($this->_objects['LastTrackback']) && $this->hasLastTrackback()) {
            $it =& $this->_fetchEntities('Trackback', 1, 0, 'trackback_created', 'DESC');
            $this->_objects['LastTrackback'] =& $it->getNext();
        }
        return $this->_objects['LastTrackback'];
    }

    function &paginateTrackbacks($perpage = 10, $sort = null, $order = null)
    {
        $pages =& $this->_paginateEntities('Trackback', $perpage, $sort, $order);
        return $pages;
    }

    function removeTrackbacks()
    {
        return $this->_removeEntities('Trackback');
    }

    function countTrackbacks()
    {
        return $this->_countEntities('Trackback');
    }

    function addVote(&$entity)
    {
        if ($entity->getName() != 'Vote') {
            return false;
        }
        return $this->_addEntity($entity);
    }

    function removeVote(&$entity)
    {
        if ($entity->getName() != 'Vote') {
            return;
        }
        return $this->removeVoteById($entity->getId());
    }

    function removeVoteById($id)
    {
        return $this->_removeEntityById('vote_id', 'Vote', $id);
    }

    function &createVote()
    {
        $entity =& $this->_createEntity('Vote');
        return $entity;
    }

    function &_fetchVotes()
    {
        if (!isset($this->_objects['Votes'])) {
            $this->_objects['Votes'] =& $this->_fetchEntities('Vote');
        }
        return $this->_objects['Votes'];
    }

    function &_fetchLastVote()
    {
        if (!isset($this->_objects['LastVote']) && $this->hasLastVote()) {
            $it =& $this->_fetchEntities('Vote', 1, 0, 'vote_created', 'DESC');
            $this->_objects['LastVote'] =& $it->getNext();
        }
        return $this->_objects['LastVote'];
    }

    function &paginateVotes($perpage = 10, $sort = null, $order = null)
    {
        $pages =& $this->_paginateEntities('Vote', $perpage, $sort, $order);
        return $pages;
    }

    function removeVotes()
    {
        return $this->_removeEntities('Vote');
    }

    function countVotes()
    {
        return $this->_countEntities('Vote');
    }

    function addView(&$entity)
    {
        if ($entity->getName() != 'View') {
            return false;
        }
        return $this->_addEntity($entity);
    }

    function removeView(&$entity)
    {
        if ($entity->getName() != 'View') {
            return;
        }
        return $this->removeViewById($entity->getId());
    }

    function removeViewById($id)
    {
        return $this->_removeEntityById('view_id', 'View', $id);
    }

    function &createView()
    {
        $entity =& $this->_createEntity('View');
        return $entity;
    }

    function &_fetchViews()
    {
        if (!isset($this->_objects['Views'])) {
            $this->_objects['Views'] =& $this->_fetchEntities('View');
        }
        return $this->_objects['Views'];
    }

    function &_fetchLastView()
    {
        if (!isset($this->_objects['LastView']) && $this->hasLastView()) {
            $it =& $this->_fetchEntities('View', 1, 0, 'view_created', 'DESC');
            $this->_objects['LastView'] =& $it->getNext();
        }
        return $this->_objects['LastView'];
    }

    function &paginateViews($perpage = 10, $sort = null, $order = null)
    {
        $pages =& $this->_paginateEntities('View', $perpage, $sort, $order);
        return $pages;
    }

    function removeViews()
    {
        return $this->_removeEntities('View');
    }

    function countViews()
    {
        return $this->_countEntities('View');
    }

    function &linkTag(&$entity)
    {
        $ret = false;
        if ($entity->getName() == 'Tag') {
            $ret =& $this->linkTagById($entity->getId());
        }
        return $ret;
    }

    function &linkTagById($id)
    {
        $link =& $this->_linkEntityById('Node2tag', 'tag_id', $id);
        return $link;
    }

    function unlinkTag(&$entity)
    {
        if ($entity->getName() != 'Tag') {
            return 0;
        }
        return $this->unlinkTagById($entity->getId());
    }

    function unlinkTagById($id)
    {
        return $this->_unlinkEntityById('Node2tag', 'node2tag_node_id', 'node2tag_tag_id', $id);
    }

    function unlinkTags()
    {
        return $this->_unlinkEntities('Node2tag');
    }

    function &_fetchTags($limit = 0, $offset = 0, $sort = null, $order = null)
    {
        if (!isset($this->_objects['Tags'])) {
            $this->_objects['Tags'] =& $this->_fetchEntities('Tag', $limit, $offset, $sort, $order);
        }
        return $this->_objects['Tags'];
    }

    function &paginateTags($perpage = 10, $sort = null, $order = null)
    {
        $pages =& $this->_paginateEntities('Tag', $perpage, $sort, $order);
        return $pages;
    }

    function countTags()
    {
        return $this->_countEntities('Tag');
    }

    function _getVar($name)
    {
        return $this->_vars['node_' . $name];
    }

    function _setVar($name, $value)
    {
        switch ($name) {
        case 'id':
            $this->_vars['node_id'] = $value;
            break;
        case 'title':
            $this->_vars['node_title'] = trim($value);
            break;
        case 'source':
            $this->_vars['node_source'] = trim($value);
            break;
        case 'source_title':
            $this->_vars['node_source_title'] = trim($value);
            break;
        case 'content_syntax':
            $this->_vars['node_content_syntax'] = trim($value);
            break;
        case 'body':
            $this->_vars['node_body'] = trim($value);
            break;
        case 'body_html':
            $this->_vars['node_body_html'] = trim($value);
            break;
        case 'teaser':
            $this->_vars['node_teaser'] = trim($value);
            break;
        case 'teaser_html':
            $this->_vars['node_teaser_html'] = trim($value);
            break;
        case 'published':
            $this->_vars['node_published'] = $value;
            break;
        case 'allow_comments':
            $this->_vars['node_allow_comments'] = $value;
            break;
        case 'allow_trackbacks':
            $this->_vars['node_allow_trackbacks'] = $value;
            break;
        case 'allow_edit':
            $this->_vars['node_allow_edit'] = $value;
            break;
        case 'status':
            $this->_vars['node_status'] = $value;
            break;
        case 'hidden':
            $this->_vars['node_hidden'] = $value;
            break;
        case 'priority':
            $this->_vars['node_priority'] = $value;
            break;
        case 'views':
            $this->_vars['node_views'] = $value;
            break;
        case 'category_id':
            $this->_vars['node_category_id'] = $value;
            break;
        case 'userid':
            $this->_vars['node_userid'] = trim($value);
            break;
        case 'comment_lasttime':
            $this->_vars['node_comment_lasttime'] = $value;
            break;
        case 'trackback_lasttime':
            $this->_vars['node_trackback_lasttime'] = $value;
            break;
        case 'vote_lasttime':
            $this->_vars['node_vote_lasttime'] = $value;
            break;
        case 'view_lasttime':
            $this->_vars['node_view_lasttime'] = $value;
            break;
        default:
            trigger_error(sprintf('Error trying to set value for variable %s. This variable is either read-only or does not exist for this entity', $name), E_USER_WARNING);
            return false;
        }
        return true;
    }

    function &__get($name)
    {
        $ret = null;
        settype($name, 'string');
        switch ($name) {
        case 'title':
            $ret = $this->getVar('title');
            break;
        case 'source':
            $ret = $this->getVar('source');
            break;
        case 'source_title':
            $ret = $this->getVar('source_title');
            break;
        case 'content_syntax':
            $ret = $this->getVar('content_syntax');
            break;
        case 'body':
            $ret = $this->getVar('body');
            break;
        case 'body_html':
            $ret = $this->getVar('body_html');
            break;
        case 'teaser':
            $ret = $this->getVar('teaser');
            break;
        case 'teaser_html':
            $ret = $this->getVar('teaser_html');
            break;
        case 'published':
            $ret = $this->getVar('published');
            break;
        case 'allow_comments':
            $ret = $this->getVar('allow_comments');
            break;
        case 'allow_trackbacks':
            $ret = $this->getVar('allow_trackbacks');
            break;
        case 'allow_edit':
            $ret = $this->getVar('allow_edit');
            break;
        case 'status':
            $ret = $this->getVar('status');
            break;
        case 'hidden':
            $ret = $this->getVar('hidden');
            break;
        case 'priority':
            $ret = $this->getVar('priority');
            break;
        case 'views':
            $ret = $this->getVar('views');
            break;
        case 'Category':
            $ret =& $this->_fetchCategory();
            break;
        case 'Comments':
            $ret =& $this->_fetchComments();
            break;
        case 'LastComment':
            $ret =& $this->_fetchLastComment();
            break;
        case 'Trackbacks':
            $ret =& $this->_fetchTrackbacks();
            break;
        case 'LastTrackback':
            $ret =& $this->_fetchLastTrackback();
            break;
        case 'Votes':
            $ret =& $this->_fetchVotes();
            break;
        case 'LastVote':
            $ret =& $this->_fetchLastVote();
            break;
        case 'Views':
            $ret =& $this->_fetchViews();
            break;
        case 'LastView':
            $ret =& $this->_fetchLastView();
            break;
        case 'Tags':
            $ret =& $this->_fetchTags();
            break;
        case 'User':
            $ret =& $this->_fetchUser();
            break;
        default:
        }
        return $ret;
    }

    function __set($name, $value)
    {
        settype($name, 'string');
        switch ($name) {
        case 'title':
            $this->setVar('title', $value);
            break;
        case 'source':
            $this->setVar('source', $value);
            break;
        case 'source_title':
            $this->setVar('source_title', $value);
            break;
        case 'content_syntax':
            $this->setVar('content_syntax', $value);
            break;
        case 'body':
            $this->setVar('body', $value);
            break;
        case 'body_html':
            $this->setVar('body_html', $value);
            break;
        case 'teaser':
            $this->setVar('teaser', $value);
            break;
        case 'teaser_html':
            $this->setVar('teaser_html', $value);
            break;
        case 'published':
            $this->setVar('published', $value);
            break;
        case 'allow_comments':
            $this->setVar('allow_comments', $value);
            break;
        case 'allow_trackbacks':
            $this->setVar('allow_trackbacks', $value);
            break;
        case 'allow_edit':
            $this->setVar('allow_edit', $value);
            break;
        case 'status':
            $this->setVar('status', $value);
            break;
        case 'hidden':
            $this->setVar('hidden', $value);
            break;
        case 'priority':
            $this->setVar('priority', $value);
            break;
        case 'views':
            $this->setVar('views', $value);
            break;
        case 'Category':
            if (is_array($value)) {
                $entity =& $value[0];
            } else {
                $entity =& $value;
            }
            $this->assignCategory($entity);
            break;
        case 'Comments':
            $this->removeComments();
            foreach (array_keys($value) as $i) {
                $this->addComment($value[$i]);
            }
            break;
        case 'Trackbacks':
            $this->removeTrackbacks();
            foreach (array_keys($value) as $i) {
                $this->addTrackback($value[$i]);
            }
            break;
        case 'Votes':
            $this->removeVotes();
            foreach (array_keys($value) as $i) {
                $this->addVote($value[$i]);
            }
            break;
        case 'Views':
            $this->removeViews();
            foreach (array_keys($value) as $i) {
                $this->addView($value[$i]);
            }
            break;
        case 'Tags':
            $this->unlinkTags();
            foreach (array_keys($value) as $i) {
                if (is_object($value[$i])) {
                    $this->linkTag($value[$i]);
                } else {
                    $this->linkTagById($value[$i]);
                }
            }
            break;
        default:
        }
    }

    function initVar($name, $value)
    {
        switch ($name) {
        case 'node_id':
            $this->_vars['node_id'] = $value;
            break;
        case 'node_created':
            $this->_vars['node_created'] = $value;
            break;
        case 'node_updated':
            $this->_vars['node_updated'] = $value;
            break;
        case 'node_title':
            $this->_vars['node_title'] = $value;
            break;
        case 'node_source':
            $this->_vars['node_source'] = $value;
            break;
        case 'node_source_title':
            $this->_vars['node_source_title'] = $value;
            break;
        case 'node_content_syntax':
            $this->_vars['node_content_syntax'] = $value;
            break;
        case 'node_body':
            $this->_vars['node_body'] = $value;
            break;
        case 'node_body_html':
            $this->_vars['node_body_html'] = $value;
            break;
        case 'node_teaser':
            $this->_vars['node_teaser'] = $value;
            break;
        case 'node_teaser_html':
            $this->_vars['node_teaser_html'] = $value;
            break;
        case 'node_published':
            $this->_vars['node_published'] = $value;
            break;
        case 'node_allow_comments':
            $this->_vars['node_allow_comments'] = $value;
            break;
        case 'node_allow_trackbacks':
            $this->_vars['node_allow_trackbacks'] = $value;
            break;
        case 'node_allow_edit':
            $this->_vars['node_allow_edit'] = $value;
            break;
        case 'node_status':
            $this->_vars['node_status'] = $value;
            break;
        case 'node_hidden':
            $this->_vars['node_hidden'] = $value;
            break;
        case 'node_priority':
            $this->_vars['node_priority'] = $value;
            break;
        case 'node_views':
            $this->_vars['node_views'] = $value;
            break;
        case 'node_category_id':
            $this->_vars['node_category_id'] = $value;
            break;
        case 'node_userid':
            $this->_vars['node_userid'] = $value;
            break;
        case 'node_comment_count':
            $this->_vars['node_comment_count'] = $value;
            break;
        case 'node_comment_last':
            $this->_vars['node_comment_last'] = $value;
            break;
        case 'node_comment_lasttime':
            $this->_vars['node_comment_lasttime'] = $value;
            break;
        case 'node_trackback_count':
            $this->_vars['node_trackback_count'] = $value;
            break;
        case 'node_trackback_last':
            $this->_vars['node_trackback_last'] = $value;
            break;
        case 'node_trackback_lasttime':
            $this->_vars['node_trackback_lasttime'] = $value;
            break;
        case 'node_vote_count':
            $this->_vars['node_vote_count'] = $value;
            break;
        case 'node_vote_last':
            $this->_vars['node_vote_last'] = $value;
            break;
        case 'node_vote_lasttime':
            $this->_vars['node_vote_lasttime'] = $value;
            break;
        case 'node_view_count':
            $this->_vars['node_view_count'] = $value;
            break;
        case 'node_view_last':
            $this->_vars['node_view_last'] = $value;
            break;
        case 'node_view_lasttime':
            $this->_vars['node_view_lasttime'] = $value;
            break;
        default:
        }
    }
}

class Xigg_Model_NodeRepositoryBase extends Sabai_Model_EntityRepository
{
    function Xigg_Model_NodeRepositoryBase(&$model)
    {
        parent::Sabai_Model_EntityRepository('Node', $model);
    }
    function &fetchByUser($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByForeign('node_userid', $id, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByUser($id, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntity('User', $id, $perpage, $sort, $order);
        return $it;
    }

    function countByUser($id)
    {
        return $this->_countByForeign('node_userid', $id);
    }

    function &fetchByUserAndCriteria($id, &$criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByForeignAndCriteria('node_userid', $id, $criteria, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByUserAndCriteria($id, &$criteria, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntityAndCriteria('User', $id, $criteria, $perpage, $sort, $order);
        return $it;
    }

    function countByUserAndCriteria($id, &$criteria)
    {
        return $this->_countByForeignAndCriteria('node_userid', $id, $criteria);
    }

    function &fetchByCategory($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByForeign('node_category_id', $id, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByCategory($id, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntity('Category', $id, $perpage, $sort, $order);
        return $it;
    }

    function countByCategory($id)
    {
        return $this->_countByForeign('node_category_id', $id);
    }

    function &fetchByCategoryAndCriteria($id, &$criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByForeignAndCriteria('node_category_id', $id, $criteria, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByCategoryAndCriteria($id, &$criteria, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntityAndCriteria('Category', $id, $criteria, $perpage, $sort, $order);
        return $it;
    }

    function countByCategoryAndCriteria($id, &$criteria)
    {
        return $this->_countByForeignAndCriteria('node_category_id', $id, $criteria);
    }

    function &fetchByTag($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByAssoc('node', 'Node2tag', 'node2tag_tag_id', $id, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByTag($id, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntity('Tag', $id, $perpage, $sort, $order);
        return $it;
    }

    function countByTag($id)
    {
        return $this->_countByAssoc('node_id', 'Node2tag', 'node2tag_tag_id', $id);
    }

    function &fetchByTagAndCriteria($id, &$criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByAssocAndCriteria('node', 'Node2tag', 'node2tag_tag_id', $id, $criteria, $limit, $offset, $sort, $order);
        return $it;
    }

    function countByTagAndCriteria($id, &$criteria)
    {
        return $this->_countByAssocAndCriteria('node_id', 'Node2tag', 'node2tag_tag_id', $id, $criteria);
    }

    function &paginateByTagAndCriteria($id, &$criteria, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntityAndCriteria('Tag', $id, $criteria, $perpage, $sort, $order);
        return $it;
    }

    function &_getCollectionByRowset(&$rs)
    {
        $collection =& new Xigg_Model_NodesByRowset($rs, $this->_model->create('Node'), $this->_model);
        return $collection;
    }

    function &createCollection($entities = array(), $key = 0)
    {
        $collection =& new Xigg_Model_Nodes($this->_model, $entities, $key);
        return $collection;
    }
}

class Xigg_Model_NodesByRowset extends Sabai_Model_EntityCollection_Rowset
{
    function Xigg_Model_NodesByRowset(&$rs, &$emptyEntity, &$model, $key = 0)
    {
        parent::Sabai_Model_EntityCollection_Rowset('Nodes', $rs, $emptyEntity, $model, $key);
    }

    function _loadRow(&$entity, $row)
    {
        $entity->initVars($row);
    }
}

class Xigg_Model_Nodes extends Sabai_Model_EntityCollection_Array
{
    function Xigg_Model_Nodes(&$model, $entities = array(), $key = 0)
    {
        parent::Sabai_Model_EntityCollection_Array($model, 'Nodes', $entities, $key);
    }
}