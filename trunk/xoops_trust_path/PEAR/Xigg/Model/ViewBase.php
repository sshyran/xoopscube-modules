<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
Xigg/library/Xigg/Model/View.php
*/
class Xigg_Model_ViewBase extends Sabai_Model_Entity
{
    function Xigg_Model_ViewBase(&$model)
    {
        parent::Sabai_Model_Entity('View', $model);
        $this->_vars = array('view_id' => 0, 'view_created' => 0, 'view_updated' => 0, 'view_uid' => null, 'view_last' => 0, 'view_node_id' => null);
    }

    function varNames()
    {
        return array('id' => _('Id'), 'created' => _('Created'), 'updated' => _('Updated'), 'uid' => _('Uid'), 'last' => _('Last'), 'node_id' => _('Node id'));
    }

    function propertyNames()
    {
        return array('uid' => _('Uid'), 'last' => _('Last'), 'Node' => 'Node');
    }

    function localPropertyNames()
    {
        return array('uid' => _('Uid'), 'last' => _('Last'));
    }

    function getId()
    {
        return $this->getVar('id');
    }

    function setId($value)
    {
        $this->setVar('id', $value);
    }

    function getTimeCreated()
    {
        return $this->getVar('created');
    }

    function getTimeUpdated()
    {
        return $this->getVar('updated');
    }

    function assignNode(&$entity)
    {
        if ($entity->getName() != 'Node') {
            return false;
        }
        return $this->_assignEntity('node_id', $entity);
    }

    function unassignNode()
    {
        return $this->_unassignEntity('node_id');
    }

    function &_fetchNode()
    {
        if (!isset($this->_objects['Node'])) {
            $this->_objects['Node'] =& $this->_fetchEntity('Node', 'node_id');
        }
        return $this->_objects['Node'];
    }

    function _getVar($name)
    {
        return $this->_vars['view_' . $name];
    }

    function _setVar($name, $value)
    {
        switch ($name) {
        case 'id':
            $this->_vars['view_id'] = $value;
            break;
        case 'uid':
            $this->_vars['view_uid'] = trim($value);
            break;
        case 'last':
            $this->_vars['view_last'] = $value;
            break;
        case 'node_id':
            $this->_vars['view_node_id'] = $value;
            break;
        default:
            trigger_error(sprintf('Error trying to set value for variable %s. This variable is either read-only or does not exist for this entity', $name), E_USER_WARNING);
            return false;
        }
        return true;
    }

    function &__get($name)
    {
        $ret = null;
        settype($name, 'string');
        switch ($name) {
        case 'uid':
            $ret = $this->getVar('uid');
            break;
        case 'last':
            $ret = $this->getVar('last');
            break;
        case 'Node':
            $ret =& $this->_fetchNode();
            break;
        default:
        }
        return $ret;
    }

    function __set($name, $value)
    {
        settype($name, 'string');
        switch ($name) {
        case 'uid':
            $this->setVar('uid', $value);
            break;
        case 'last':
            $this->setVar('last', $value);
            break;
        case 'Node':
            if (is_array($value)) {
                $entity =& $value[0];
            } else {
                $entity =& $value;
            }
            $this->assignNode($entity);
            break;
        default:
        }
    }

    function initVar($name, $value)
    {
        switch ($name) {
        case 'view_id':
            $this->_vars['view_id'] = $value;
            break;
        case 'view_created':
            $this->_vars['view_created'] = $value;
            break;
        case 'view_updated':
            $this->_vars['view_updated'] = $value;
            break;
        case 'view_uid':
            $this->_vars['view_uid'] = $value;
            break;
        case 'view_last':
            $this->_vars['view_last'] = $value;
            break;
        case 'view_node_id':
            $this->_vars['view_node_id'] = $value;
            break;
        default:
        }
    }
}

class Xigg_Model_ViewRepositoryBase extends Sabai_Model_EntityRepository
{
    function Xigg_Model_ViewRepositoryBase(&$model)
    {
        parent::Sabai_Model_EntityRepository('View', $model);
    }

    function &fetchByNode($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByForeign('view_node_id', $id, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByNode($id, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntity('Node', $id, $perpage, $sort, $order);
        return $it;
    }

    function countByNode($id)
    {
        return $this->_countByForeign('view_node_id', $id);
    }

    function &fetchByNodeAndCriteria($id, &$criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        $it =& $this->_fetchByForeignAndCriteria('view_node_id', $id, $criteria, $limit, $offset, $sort, $order);
        return $it;
    }

    function &paginateByNodeAndCriteria($id, &$criteria, $perpage = 10, $sort = null, $order = null)
    {
        $it =& $this->_paginateByEntityAndCriteria('Node', $id, $criteria, $perpage, $sort, $order);
        return $it;
    }

    function countByNodeAndCriteria($id, &$criteria)
    {
        return $this->_countByForeignAndCriteria('view_node_id', $id, $criteria);
    }

    function &_getCollectionByRowset(&$rs)
    {
        $collection =& new Xigg_Model_ViewsByRowset($rs, $this->_model->create('View'), $this->_model);
        return $collection;
    }

    function &createCollection($entities = array(), $key = 0)
    {
        $collection =& new Xigg_Model_Views($this->_model, $entities, $key);
        return $collection;
    }
}

class Xigg_Model_ViewsByRowset extends Sabai_Model_EntityCollection_Rowset
{
    function Xigg_Model_ViewsByRowset(&$rs, &$emptyEntity, &$model, $key = 0)
    {
        parent::Sabai_Model_EntityCollection_Rowset('Views', $rs, $emptyEntity, $model, $key);
    }

    function _loadRow(&$entity, $row)
    {
        $entity->initVars($row);
    }
}

class Xigg_Model_Views extends Sabai_Model_EntityCollection_Array
{
    function Xigg_Model_Views(&$model, $entities = array(), $key = 0)
    {
        parent::Sabai_Model_EntityCollection_Array($model, 'Views', $entities, $key);
    }
}