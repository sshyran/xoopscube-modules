<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
Xigg/library/Xigg/Model/Role.php
*/
class Xigg_Model_RoleBase extends Sabai_Model_Entity
{
    function Xigg_Model_RoleBase(&$model)
    {
        parent::Sabai_Model_Entity('Role', $model);
        $this->_vars = array('role_id' => 0, 'role_created' => 0, 'role_updated' => 0, 'role_name' => null, 'role_permissions' => null, 'role_system' => 0, 'role_member_count' => 0, 'role_member_last' => 0, 'role_member_lasttime' => 0);
    }

    function varNames()
    {
        return array('id' => _('Id'), 'created' => _('Created'), 'updated' => _('Updated'), 'name' => _('Name'), 'permissions' => _('Permissions'), 'system' => _('System'), 'member_count' => _('Member count'), 'member_last' => _('Member last'), 'member_lasttime' => _('Member lasttime'));
    }

    function propertyNames()
    {
        return array('name' => _('Name'), 'permissions' => _('Permissions'), 'system' => _('System'), 'Members' => _('Members'));
    }

    function localPropertyNames()
    {
        return array('name' => _('Name'), 'permissions' => _('Permissions'), 'system' => _('System'));
    }

    function getId()
    {
        return $this->getVar('id');
    }

    function setId($value)
    {
        $this->setVar('id', $value);
    }

    function getTimeCreated()
    {
        return $this->getVar('created');
    }

    function getTimeUpdated()
    {
        return $this->getVar('updated');
    }

    function getLabel()
    {
        return $this->getVar('name');
    }

    function setLabel($value)
    {
        $this->setVar('name', $value);
    }

    function getMemberCount()
    {
        return $this->getVar('member_count');
    }

    function hasLastMember()
    {
        $last_id = $this->getVar('member_last');
        return !empty($last_id);
    }

    function addMember(&$entity)
    {
        if ($entity->getName() != 'Member') {
            return false;
        }
        return $this->_addEntity($entity);
    }

    function removeMember(&$entity)
    {
        if ($entity->getName() != 'Member') {
            return;
        }
        return $this->removeMemberById($entity->getId());
    }

    function removeMemberById($id)
    {
        return $this->_removeEntityById('member_id', 'Member', $id);
    }

    function &createMember()
    {
        $entity =& $this->_createEntity('Member');
        return $entity;
    }

    function &_fetchMembers()
    {
        if (!isset($this->_objects['Members'])) {
            $this->_objects['Members'] =& $this->_fetchEntities('Member');
        }
        return $this->_objects['Members'];
    }

    function &_fetchLastMember()
    {
        if (!isset($this->_objects['LastMember']) && $this->hasLastMember()) {
            $it =& $this->_fetchEntities('Member', 1, 0, 'member_created', 'DESC');
            $this->_objects['LastMember'] =& $it->getNext();
        }
        return $this->_objects['LastMember'];
    }

    function &paginateMembers($perpage = 10, $sort = null, $order = null)
    {
        $pages =& $this->_paginateEntities('Member', $perpage, $sort, $order);
        return $pages;
    }

    function removeMembers()
    {
        return $this->_removeEntities('Member');
    }

    function countMembers()
    {
        return $this->_countEntities('Member');
    }

    function _getVar($name)
    {
        return $this->_vars['role_' . $name];
    }

    function _setVar($name, $value)
    {
        switch ($name) {
        case 'id':
            $this->_vars['role_id'] = $value;
            break;
        case 'name':
            $this->_vars['role_name'] = trim($value);
            break;
        case 'permissions':
            $this->_vars['role_permissions'] = trim($value);
            break;
        case 'system':
            $this->_vars['role_system'] = $value;
            break;
        case 'member_lasttime':
            $this->_vars['role_member_lasttime'] = $value;
            break;
        default:
            trigger_error(sprintf('Error trying to set value for variable %s. This variable is either read-only or does not exist for this entity', $name), E_USER_WARNING);
            return false;
        }
        return true;
    }

    function &__get($name)
    {
        $ret = null;
        settype($name, 'string');
        switch ($name) {
        case 'name':
            $ret = $this->getVar('name');
            break;
        case 'permissions':
            $ret = $this->getVar('permissions');
            break;
        case 'system':
            $ret = $this->getVar('system');
            break;
        case 'Members':
            $ret =& $this->_fetchMembers();
            break;
        case 'LastMember':
            $ret =& $this->_fetchLastMember();
            break;
        default:
        }
        return $ret;
    }

    function __set($name, $value)
    {
        settype($name, 'string');
        switch ($name) {
        case 'name':
            $this->setVar('name', $value);
            break;
        case 'permissions':
            $this->setVar('permissions', $value);
            break;
        case 'system':
            $this->setVar('system', $value);
            break;
        case 'Members':
            $this->removeMembers();
            foreach (array_keys($value) as $i) {
                $this->addMember($value[$i]);
            }
            break;
        default:
        }
    }

    function initVar($name, $value)
    {
        switch ($name) {
        case 'role_id':
            $this->_vars['role_id'] = $value;
            break;
        case 'role_created':
            $this->_vars['role_created'] = $value;
            break;
        case 'role_updated':
            $this->_vars['role_updated'] = $value;
            break;
        case 'role_name':
            $this->_vars['role_name'] = $value;
            break;
        case 'role_permissions':
            $this->_vars['role_permissions'] = $value;
            break;
        case 'role_system':
            $this->_vars['role_system'] = $value;
            break;
        case 'role_member_count':
            $this->_vars['role_member_count'] = $value;
            break;
        case 'role_member_last':
            $this->_vars['role_member_last'] = $value;
            break;
        case 'role_member_lasttime':
            $this->_vars['role_member_lasttime'] = $value;
            break;
        default:
        }
    }
}

class Xigg_Model_RoleRepositoryBase extends Sabai_Model_EntityRepository
{
    function Xigg_Model_RoleRepositoryBase(&$model)
    {
        parent::Sabai_Model_EntityRepository('Role', $model);
    }

    function &_getCollectionByRowset(&$rs)
    {
        $collection =& new Xigg_Model_RolesByRowset($rs, $this->_model->create('Role'), $this->_model);
        return $collection;
    }

    function &createCollection($entities = array(), $key = 0)
    {
        $collection =& new Xigg_Model_Roles($this->_model, $entities, $key);
        return $collection;
    }
}

class Xigg_Model_RolesByRowset extends Sabai_Model_EntityCollection_Rowset
{
    function Xigg_Model_RolesByRowset(&$rs, &$emptyEntity, &$model, $key = 0)
    {
        parent::Sabai_Model_EntityCollection_Rowset('Roles', $rs, $emptyEntity, $model, $key);
    }

    function _loadRow(&$entity, $row)
    {
        $entity->initVars($row);
    }
}

class Xigg_Model_Roles extends Sabai_Model_EntityCollection_Array
{
    function Xigg_Model_Roles(&$model, $entities = array(), $key = 0)
    {
        parent::Sabai_Model_EntityCollection_Array($model, 'Roles', $entities, $key);
    }
}