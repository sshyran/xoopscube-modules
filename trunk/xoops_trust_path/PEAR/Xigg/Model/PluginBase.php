<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
Xigg/library/Xigg/Model/Plugin.php
*/
class Xigg_Model_PluginBase extends Sabai_Model_Entity
{
    function Xigg_Model_PluginBase(&$model)
    {
        parent::Sabai_Model_Entity('Plugin', $model);
        $this->_vars = array('plugin_id' => 0, 'plugin_created' => 0, 'plugin_updated' => 0, 'plugin_name' => null, 'plugin_version' => null, 'plugin_active' => 0, 'plugin_params' => null, 'plugin_priority' => 0, 'plugin_locked' => 0);
    }

    function varNames()
    {
        return array('id' => _('Id'), 'created' => _('Created'), 'updated' => _('Updated'), 'name' => _('Name'), 'version' => _('Version'), 'active' => _('Active'), 'params' => _('Params'), 'priority' => _('Priority'), 'locked' => _('Locked'));
    }

    function propertyNames()
    {
        return array('name' => _('Name'), 'version' => _('Version'), 'active' => _('Active'), 'params' => _('Params'), 'priority' => _('Priority'), 'locked' => _('Locked'));
    }

    function localPropertyNames()
    {
        return array('name' => _('Name'), 'version' => _('Version'), 'active' => _('Active'), 'params' => _('Params'), 'priority' => _('Priority'), 'locked' => _('Locked'));
    }

    function getId()
    {
        return $this->getVar('id');
    }

    function setId($value)
    {
        $this->setVar('id', $value);
    }

    function getTimeCreated()
    {
        return $this->getVar('created');
    }

    function getTimeUpdated()
    {
        return $this->getVar('updated');
    }

    function getLabel()
    {
        return $this->getVar('name');
    }

    function setLabel($value)
    {
        $this->setVar('name', $value);
    }

    function _getVar($name)
    {
        return $this->_vars['plugin_' . $name];
    }

    function _setVar($name, $value)
    {
        switch ($name) {
        case 'id':
            $this->_vars['plugin_id'] = $value;
            break;
        case 'name':
            $this->_vars['plugin_name'] = trim($value);
            break;
        case 'version':
            $this->_vars['plugin_version'] = trim($value);
            break;
        case 'active':
            $this->_vars['plugin_active'] = $value;
            break;
        case 'params':
            $this->_vars['plugin_params'] = trim($value);
            break;
        case 'priority':
            $this->_vars['plugin_priority'] = $value;
            break;
        case 'locked':
            $this->_vars['plugin_locked'] = $value;
            break;
        default:
            trigger_error(sprintf('Error trying to set value for variable %s. This variable is either read-only or does not exist for this entity', $name), E_USER_WARNING);
            return false;
        }
        return true;
    }

    function &__get($name)
    {
        $ret = null;
        settype($name, 'string');
        switch ($name) {
        case 'name':
            $ret = $this->getVar('name');
            break;
        case 'version':
            $ret = $this->getVar('version');
            break;
        case 'active':
            $ret = $this->getVar('active');
            break;
        case 'params':
            $ret = $this->getVar('params');
            break;
        case 'priority':
            $ret = $this->getVar('priority');
            break;
        case 'locked':
            $ret = $this->getVar('locked');
            break;
        default:
        }
        return $ret;
    }

    function __set($name, $value)
    {
        settype($name, 'string');
        switch ($name) {
        case 'name':
            $this->setVar('name', $value);
            break;
        case 'version':
            $this->setVar('version', $value);
            break;
        case 'active':
            $this->setVar('active', $value);
            break;
        case 'params':
            $this->setVar('params', $value);
            break;
        case 'priority':
            $this->setVar('priority', $value);
            break;
        case 'locked':
            $this->setVar('locked', $value);
            break;
        default:
        }
    }

    function initVar($name, $value)
    {
        switch ($name) {
        case 'plugin_id':
            $this->_vars['plugin_id'] = $value;
            break;
        case 'plugin_created':
            $this->_vars['plugin_created'] = $value;
            break;
        case 'plugin_updated':
            $this->_vars['plugin_updated'] = $value;
            break;
        case 'plugin_name':
            $this->_vars['plugin_name'] = $value;
            break;
        case 'plugin_version':
            $this->_vars['plugin_version'] = $value;
            break;
        case 'plugin_active':
            $this->_vars['plugin_active'] = $value;
            break;
        case 'plugin_params':
            $this->_vars['plugin_params'] = $value;
            break;
        case 'plugin_priority':
            $this->_vars['plugin_priority'] = $value;
            break;
        case 'plugin_locked':
            $this->_vars['plugin_locked'] = $value;
            break;
        default:
        }
    }
}

class Xigg_Model_PluginRepositoryBase extends Sabai_Model_EntityRepository
{
    function Xigg_Model_PluginRepositoryBase(&$model)
    {
        parent::Sabai_Model_EntityRepository('Plugin', $model);
    }

    function &_getCollectionByRowset(&$rs)
    {
        $collection =& new Xigg_Model_PluginsByRowset($rs, $this->_model->create('Plugin'), $this->_model);
        return $collection;
    }

    function &createCollection($entities = array(), $key = 0)
    {
        $collection =& new Xigg_Model_Plugins($this->_model, $entities, $key);
        return $collection;
    }
}

class Xigg_Model_PluginsByRowset extends Sabai_Model_EntityCollection_Rowset
{
    function Xigg_Model_PluginsByRowset(&$rs, &$emptyEntity, &$model, $key = 0)
    {
        parent::Sabai_Model_EntityCollection_Rowset('Plugins', $rs, $emptyEntity, $model, $key);
    }

    function _loadRow(&$entity, $row)
    {
        $entity->initVars($row);
    }
}

class Xigg_Model_Plugins extends Sabai_Model_EntityCollection_Array
{
    function Xigg_Model_Plugins(&$model, $entities = array(), $key = 0)
    {
        parent::Sabai_Model_EntityCollection_Array($model, 'Plugins', $entities, $key);
    }
}